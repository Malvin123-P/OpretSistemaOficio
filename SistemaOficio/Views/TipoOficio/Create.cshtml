@model OfiGest.Models.TipoOficioModel
@{
    ViewData["Title"] = "Crear Tipo de Oficio";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .form-card {
        max-width: 900px;
        margin: 0 auto;
        margin-top: 1rem;
    }

    .btn-azul {
        background-color: #3D6FAD;
        color: white;
        width: 100%;
        padding: 0.75rem;
        font-weight: bold;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

        .btn-azul:hover {
            background-color: #2f5c91;
            color: white;
        }

    .form-label span {
        font-weight: normal;
    }

    textarea {
        resize: none;
        height: 400px;
    }

    .card-adjusted {
        height: 700px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        margin-top: 1rem;
        margin-bottom: 2rem;
        padding: 2rem;
    }
</style>


<form asp-action="Create" method="post" enctype="multipart/form-data" id="createForm">
    <div class="container-fluid d-flex flex-column compact-container">
        @Html.AntiForgeryToken()

        <h4 class="mt-3 mb-3">Crear Tipo de Oficio</h4>
        <div class="card shadow-sm border-0 p-4 card-adjusted">

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="Nombre" class="form-label">@Html.DisplayNameFor(m => m.Nombre)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <input asp-for="Nombre" class="form-control" maxlength="100" placeholder="Oficio de solicitud" id="nombreInput" />
                    <span asp-validation-for="Nombre" class="text-danger d-none"></span>
                    <span asp-validation-for="Nombre" class="text-danger"></span>
                </div>
            
                <div class="col-md-6 mb-3">
                    <label asp-for="Iniciales" class="form-label">@Html.DisplayNameFor(m => m.Iniciales)<small class="text-muted">(Puede editarse)</small></label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <input asp-for="Iniciales" class="form-control" id="codigoCorto" maxlength="20" placeholder="Se genera automáticamente"/>
                    <span asp-validation-for="Iniciales" class="text-danger d-none"></span>
                </div>
            </div>

            <div class="mb-3">
                <label asp-for="Descripcion" class="form-label">@Html.DisplayNameFor(m => m.Descripcion)<span class="text-muted">(Opcional)</span></label>
                <textarea asp-for="Descripcion" maxlength="500" class="form-control" placeholder="Escribe una descripción si lo deseas..."></textarea>
                <span asp-validation-for="Descripcion" class="text-danger d-none"></span>
                <div id="contadorDescripcion" class="mt-2 text-muted text-end"></div>
            </div>

            <div class="mt-auto">
                <button type="submit" class="btn btn-azul d-flex justify-content-center align-items-center gap-2 w-100">
                    CREAR TIPO DE OFICIO
                </button>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">

    <script>
        $(document).ready(function () {
            $('form').attr('novalidate', 'novalidate');
            $('.selectpicker').selectpicker();

            const ValidacionMessage = '@Html.Raw(TempData["Validacion"]?.ToString())';

            if (ValidacionMessage) {
                Swal.fire({
                    icon: "error",
                    title: "¡Atención!",
                    text: ValidacionMessage,
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
            }

            const nombreInput = $('[name="Nombre"]');
            const inicialesInput = $('[name="Iniciales"]');
            const descripcionInput = $('[name="Descripcion"]');
            const contador = $('#contadorDescripcion');

            // Función para determinar el prefijo basado en el nombre
            function obtenerPrefijo(nombre) {
                const nombreLower = nombre.toLowerCase();
                if (nombreLower.includes('certificacion') || nombreLower.includes('certificación')) {
                    return 'CERT-';
                }
                return 'OFI-';
            }

            nombreInput.on("input", function () {
                const nombreActual = $(this).val().trim();

                if (nombreActual) {
                    const palabras = nombreActual.split(/\s+/);
                    const generadas = palabras.map(p => p.charAt(0).toUpperCase()).join("");
                    const prefijo = obtenerPrefijo(nombreActual);

                    // Obtener el valor actual de iniciales (sin el prefijo actual)
                    const valorActual = inicialesInput.val().toUpperCase();
                    const prefijoActual = valorActual.startsWith('OFI-') ? 'OFI-' :
                                         valorActual.startsWith('CERT-') ? 'CERT-' : '';
                    const contenidoUsuario = prefijoActual ? valorActual.substring(prefijoActual.length) : valorActual;

                    // Combinar: prefijo correcto + iniciales generadas + contenido adicional del usuario
                    const combinadas = prefijo + generadas + contenidoUsuario.replace(generadas, '');
                    inicialesInput.val(combinadas);
                } else {
                    // Si no hay nombre, usar prefijo por defecto (OFI-)
                    const valorActual = inicialesInput.val().toUpperCase();
                    if (!valorActual.startsWith("OFI-") && !valorActual.startsWith("CERT-")) {
                        inicialesInput.val("OFI-" + valorActual);
                    }
                }
            });

            inicialesInput.on("input", function () {
                let valorActual = $(this).val().toUpperCase();
                const nombreActual = nombreInput.val().trim();
                const prefijo = nombreActual ? obtenerPrefijo(nombreActual) : 'OFI-';

                // Asegurar que siempre empiece con el prefijo correcto
                if (!valorActual.startsWith(prefijo)) {
                    // Si no tiene el prefijo correcto, remover cualquier prefijo existente y agregar el correcto
                    const sinPrefijo = valorActual.replace(/^(OFI-|CERT-)/, '');
                    valorActual = prefijo + sinPrefijo;
                    $(this).val(valorActual);
                }

                // Mantener todo en mayúsculas
                $(this).val(valorActual);
            });

            // Inicializar el campo de iniciales con prefijo por defecto si está vacío
            if (!inicialesInput.val().trim()) {
                const nombreActual = nombreInput.val().trim();
                const prefijo = nombreActual ? obtenerPrefijo(nombreActual) : 'OFI-';
                inicialesInput.val(prefijo);
            } else {
                // Asegurar que el valor existente tenga el formato correcto
                let valorActual = inicialesInput.val().toUpperCase();
                const nombreActual = nombreInput.val().trim();
                const prefijo = nombreActual ? obtenerPrefijo(nombreActual) : 'OFI-';

                if (!valorActual.startsWith(prefijo)) {
                    const sinPrefijo = valorActual.replace(/^(OFI-|CERT-)/, '');
                    inicialesInput.val(prefijo + sinPrefijo);
                } else {
                    inicialesInput.val(valorActual);
                }
            }

            if (descripcionInput.length) {
                const maxLength = 500;
                const umbral = 450;
                let alertaMostrada = false;

                descripcionInput.on("input", function () {
                    const actual = descripcionInput.val().length;
                    contador.text(`${actual}/${maxLength} caracteres`);
                    contador.removeClass("text-warning text-danger");

                    if (actual >= maxLength) {
                        contador.addClass("text-danger");
                        if (!alertaMostrada) {
                            Swal.fire({
                                title: "Límite alcanzado",
                                text: "Has llegado al máximo de 500 caracteres permitidos.",
                                icon: "warning",
                                confirmButtonText: "Entendido",
                                confirmButtonColor: "#3D6FAD"
                            });
                            alertaMostrada = true;
                        }
                    } else if (actual >= umbral) {
                        contador.addClass("text-warning");
                        alertaMostrada = false;
                    } else {
                        alertaMostrada = false;
                    }
                });

                const actual = descripcionInput.val().length;
                contador.text(`${actual}/${maxLength} caracteres`);
                if (actual >= maxLength) contador.addClass("text-danger");
                else if (actual >= umbral) contador.addClass("text-warning");
            }

            $('#createForm').on('submit', function (e) {
                e.preventDefault();

                const nombreActual = nombreInput.val()?.trim();
                const inicialesActuales = inicialesInput.val()?.trim();

                // Validación corregida - más simple y efectiva
                if (!nombreActual || !inicialesActuales) {
                    Swal.fire({
                        title: '<span>Campos requeridos (<span style="color:#dc3545">*</span>)</span>',
                        text: "Por favor complete todos los campos obligatorios.",
                        icon: "warning",
                        confirmButtonText: "Entendido",
                        confirmButtonColor: "#3D6FAD"
                    });
                    return false;
                }

                // Validar que las iniciales tengan contenido después del prefijo
                const tienePrefijo = inicialesActuales.startsWith('OFI-') || inicialesActuales.startsWith('CERT-');
                const contenidoDespuesPrefijo = inicialesActuales.substring(inicialesActuales.indexOf('-') + 1);

                if (!tienePrefijo || !contenidoDespuesPrefijo) {
                    Swal.fire({
                        title: "Formato incorrecto",
                        text: "Las iniciales deben comenzar con OFI- o CERT- y tener contenido después del guión.",
                        icon: "warning",
                        confirmButtonText: "Entendido",
                        confirmButtonColor: "#3D6FAD"
                    });
                    return false;
                }

                this.submit();
            });
        });
    </script>
}