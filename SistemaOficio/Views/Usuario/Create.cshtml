@model OfiGest.Models.UsuarioModel
@{
    ViewData["Title"] = "Crear Usuario";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .btn-azul {
        background-color: #3D6FAD;
        color: white;
        width: 100%;
        padding: 0.75rem;
        font-weight: bold;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

        .btn-azul:hover {
            background-color: #2f5c91;
            color: white;
        }

    .bootstrap-select .dropdown-toggle {
        border: 1px solid #ced4da;
        border-radius: .25rem;
        background: white;
    }


    .bootstrap-select .dropdown-menu li.selected > a {
        background-color: #3D6FAD !important;
        color: white !important;
    }


    .card-adjusted {
        height: 700px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        margin-top: 1rem;
        margin-bottom: 2rem;
        padding: 2rem;
    }


    .form-check-input:checked {
        background-color: #0B5926;
        border-color: #0B5926;
    }

      .form-label {
        font-weight: 600;
        margin-bottom: 0.5rem;
    }
</style>

<form asp-action="Create" method="post" autocomplete="off" id="createForm" enctype="multipart/form-data">
    <div class="container-fluid d-flex flex-column compact-container">
        @Html.AntiForgeryToken()

        <h4 class="mt-3 mb-3">Crear Usuarios</h4>
        <div class="card shadow-sm border-0 p-6 card-adjusted">
            <div class="row">

                <!-- Imagen de perfil -->
                <div class="col-md-6 mb-3">
                    <label asp-for="ArchivoImagen" class="form-label">Imagen de Perfil</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-image-fill"></i></span>
                        <input asp-for="ArchivoImagen" type="file" class="form-control" accept=".jpg,.jpeg,.png,.gif" id="archivoImagen" />
                    </div>
                    <small class="form-text text-muted">Formatos permitidos: JPG, JPEG, PNG, GIF. Máximo 2MB.</small>
                    <span asp-validation-for="ArchivoImagen" class="text-danger"></span>
                </div>

                <!-- Nombre -->
                <div class="col-md-6 mb-3">
                    <label asp-for="Nombre" class="form-label">@Html.DisplayNameFor(m => m.Nombre)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-person-fill"></i></span>
                        <input asp-for="Nombre" class="form-control" maxlength="100" placeholder="Ej: Mario" id="correoInput" />
                    </div>
                    <span asp-validation-for="Nombre" class="text-danger d-none"></span>
                </div>

                <!-- Apellido -->
                <div class="col-md-6 mb-3">
                    <label asp-for="Apellido" class="form-label">@Html.DisplayNameFor(m => m.Apellido)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-person-lines-fill"></i></span>
                        <input asp-for="Apellido" class="form-control" maxlength="100" placeholder="Ej: Ramírez Moreta" />
                    </div>
                    <span asp-validation-for="Apellido" class="text-danger d-none"></span>
                </div>

                <!-- Correo -->
                <div class="col-md-6 mb-3">
                    <label asp-for="Correo" class="form-label">@Html.DisplayNameFor(m => m.Correo)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-envelope-fill"></i></span>
                        <input asp-for="Correo" class="form-control" maxlength="150" placeholder="Ej: mario@opret.gob.do" id="Correo" />
                    </div>
                    <span asp-validation-for="Correo" class="text-danger d-none"></span>
                    <small id="correo-feedback" class="form-text text-muted mt-1"></small>
                </div>

                <!-- Departamento -->
                <div class="col-md-6 mb-3">
                    <label asp-for="DepartamentoId" class="form-label">@Html.DisplayNameFor(m => m.DepartamentoId)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-building"></i></span>
                        <select asp-for="DepartamentoId" asp-items="ViewBag.Departamentos"
                                class="form-control selectpicker" data-live-search="true" data-size="5" id="DepartamentoId">
                            <option value="">Seleccione el departamento al que pertenece</option>
                        </select>
                    </div>
                    <span asp-validation-for="DepartamentoId" class="text-danger d-none"></span>
                </div>

                <!-- División -->
                <div class="col-md-6 mb-3" id="divisionGroup">
                    <label asp-for="DivisionId" class="form-label">@Html.DisplayNameFor(m => m.DivisionId)</label>
                    <span class="text-danger indicador-division" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-diagram-3-fill"></i></span>
                        <select asp-for="DivisionId" asp-items="ViewBag.Divisiones"
                                class="form-control selectpicker" data-live-search="true" data-size="5" id="DivisionId">
                            <option value="">Seleccione la división correspondiente</option>
                        </select>
                    </div>
                    <span asp-validation-for="DivisionId" class="text-danger d-none"></span>
                </div>

                <!-- Rol -->
                <div class="mb-3">
                    <label asp-for="RolId" class="form-label">@Html.DisplayNameFor(m => m.RolId)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-person-badge-fill"></i></span>
                        <select asp-for="RolId" asp-items="ViewBag.Roles"
                                class="form-control selectpicker" data-live-search="true" data-size="5" id="RolId">
                            <option value="">Seleccione el rol que desempeñará</option>
                        </select>
                    </div>
                    <span asp-validation-for="RolId" class="text-danger d-none"></span>
                </div>

                <!-- Encargado Departamental -->
                <div class="col-md-6 mb-3">
                    <div class="form-check form-switch">
                        <input asp-for="EsEncargadoDepartamental" class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" />
                        <label class="form-check-label" for="flexSwitchCheckDefault">
                            Encargado Departamental
                        </label>
                        <br />
                        <small class="form-text text-muted">
                            Si se marca, el usuario será el encargado del departamento y no requerirá división.
                        </small>
                    </div>
                </div>
            </div>

            <!-- Botón de envío -->
            <div class="mt-auto">
                <button type="submit" class="btn btn-azul d-flex justify-content-center align-items-center gap-2 w-100">
                    <span id="submitText">CREAR USUARIO</span>
                </button>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <script>
        $(document).ready(function () {
            $('.selectpicker').selectpicker();
            $('form').attr('novalidate', 'novalidate');

            const warningMessage = '@Html.Raw(TempData["Warning"]?.ToString())';
            const ValidacionMessage = '@Html.Raw(TempData["Validacion"]?.ToString())';
            if (warningMessage) {
                Swal.fire({
                    icon: "warning",
                    title: "¡Atención!",
                    text: warningMessage,
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
            } else if (ValidacionMessage) {
                Swal.fire({
                    icon: "error",
                    title: "¡Atención!",
                    text: ValidacionMessage,
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
            }

            // Referencias a los inputs de texto
            const nombreInput = $('[name="Nombre"]');
            const apellidoInput = $('[name="Apellido"]');
            const correoInput = $('#Correo');
            const divisionSelect = $('#DivisionId');
            const departamentoSelect = $('#DepartamentoId');
            const encargadoCheckbox = $('#flexSwitchCheckDefault');
            const indicadorDivision = $('.indicador-division');

            // Función para eliminar solo espacios al principio
            function limpiarEspaciosInicio(texto) {
                return texto.replace(/^\s+/, ''); // Solo elimina espacios al inicio
            }

            // Limpiar espacios al principio en el input de Nombre (solo en blur)
            nombreInput.on("blur", function () {
                $(this).val(limpiarEspaciosInicio($(this).val()));
            });

            // Limpiar espacios al principio en el input de Apellido (solo en blur)
            apellidoInput.on("blur", function () {
                $(this).val(limpiarEspaciosInicio($(this).val()));
            });

            // Limpiar espacios al principio en el input de Correo (solo en blur)
            correoInput.on("blur", function () {
                $(this).val(limpiarEspaciosInicio($(this).val()));
            });

            // Verificación de correo con validación de formato
            $('#Correo').on('blur', function () {
                var correo = $(this).val();
                var feedback = $('#correo-feedback');
                var correoInput = $(this); // Asegura referencia al input
                var formatoValido = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

                if (correo.length === 0) {
                    feedback.html('');
                    feedback.removeClass('text-warning text-success text-danger text-muted');
                    correoInput.removeClass('is-valid is-invalid');
                    return;
                }

                if (!formatoValido.test(correo)) {
                    feedback.html('<i class="fas fa-info-circle text-danger"></i> Formato de correo inválido');
                    feedback.addClass('text-danger').removeClass('text-success text-warning text-muted');
                    correoValido = false;
                    return;
                }

                $.get('@Url.Action("VerificarCorreo")', { correo: correo })
                    .done(function (data) {
                        if (!data.dominioValido) {
                            feedback.html(`<i class="fas fa-ban text-danger"></i> ${data.mensaje}`);
                            feedback.addClass('text-danger').removeClass('text-success text-warning text-muted');
                            correoValido = false;
                        } else if (data.existe) {
                            feedback.html('<i class="fas fa-exclamation-triangle text-warning"></i> Ya existe un usuario con este correo');
                            feedback.addClass('text-warning').removeClass('text-success text-danger text-muted');
                            correoValido = false;
                        } else {
                            feedback.html('<i class="fas fa-check-circle text-success"></i> Correo disponible');
                            feedback.addClass('text-success').removeClass('text-warning text-danger text-muted');
                            correoValido = true;
                        }
                    })
                    .fail(function () {
                        feedback.html('<i class="fas fa-exclamation-circle text-danger"></i> Error al verificar correo');
                        feedback.addClass('text-danger').removeClass('text-success text-warning text-muted');
                        correoValido = false;
                    });
            });

            function cargarDivisiones(departamentoId) {
                divisionSelect.empty().append('<option value="">Cargando...</option>').selectpicker('refresh');
                $.getJSON('/Usuario/ObtenerDivisionesPorDepartamento', { departamentoId }, function (data) {
                    divisionSelect.empty();
                    if (data.length === 0) {
                        divisionSelect.append('<option value="">No hay divisiones disponibles</option>');
                    } else {
                        divisionSelect.append('<option value="">Seleccione una división</option>');
                        data.forEach(division => {
                            divisionSelect.append(`<option value="${division.id}">${division.nombre}</option>`);
                        });
                    }
                    divisionSelect.selectpicker('refresh');
                }).fail(function () {
                    divisionSelect.empty().append('<option value="">Error al cargar divisiones</option>').selectpicker('refresh');
                });
            }

            function actualizarEstadoDivision() {
                const esEncargado = encargadoCheckbox.is(':checked');
                if (esEncargado) {
                    divisionSelect.prop('disabled', true).val('').selectpicker('refresh');
                    indicadorDivision.hide();
                    divisionSelect.removeAttr('required');
                } else {
                    divisionSelect.prop('disabled', false);
                    indicadorDivision.show();
                    divisionSelect.attr('required', 'required');

                    const departamentoId = departamentoSelect.val();
                    if (departamentoId) {
                        cargarDivisiones(departamentoId);
                    } else {
                        divisionSelect.empty().append('<option value="">Seleccione un departamento primero</option>').selectpicker('refresh');
                    }
                }
            }

            encargadoCheckbox.on('change', actualizarEstadoDivision);
            departamentoSelect.on('change', function () {
                const departamentoId = $(this).val();
                if (!encargadoCheckbox.is(':checked')) {
                    if (departamentoId) {
                        cargarDivisiones(departamentoId);
                    } else {
                        divisionSelect.empty().append('<option value="">Seleccione un departamento primero</option>').selectpicker('refresh');
                    }
                }
            });

            actualizarEstadoDivision();

            $('#createForm').on('submit', function (e) {
                e.preventDefault();

                // Limpiar espacios al principio antes de enviar
                nombreInput.val(limpiarEspaciosInicio(nombreInput.val()));
                apellidoInput.val(limpiarEspaciosInicio(apellidoInput.val()));
                correoInput.val(limpiarEspaciosInicio(correoInput.val()));

                const esEncargado = encargadoCheckbox.is(':checked');
                const camposObligatorios = ['Nombre', 'Apellido', 'Correo', 'DepartamentoId', 'RolId'];
                let validacionFallida = false;
                let primerCampoVacio = null;

                camposObligatorios.forEach(nombre => {
                    const campo = document.querySelector(`[name="${nombre}"]`);
                    if (campo && !campo.value.trim()) {
                        validacionFallida = true;
                        if (!primerCampoVacio) primerCampoVacio = campo;
                    }
                });

                const selectpickers = ['DepartamentoId', 'RolId'];
                selectpickers.forEach(id => {
                    const select = $('#' + id);
                    if (!select.val()) {
                        validacionFallida = true;
                        if (!primerCampoVacio) primerCampoVacio = select[0];
                    }
                });

                if (!esEncargado && (!divisionSelect.val() || divisionSelect.val() === '')) {
                    validacionFallida = true;
                    if (!primerCampoVacio) primerCampoVacio = divisionSelect[0];
                }

                if (validacionFallida) {
                    Swal.fire({
                        title: '<span>Campos requeridos (<span style="color:#dc3545">*</span>)</span>',
                        text: "Por favor, complete todos los campos obligatorios.",
                        icon: "warning",
                        confirmButtonText: "Entendido",
                        confirmButtonColor: "#3D6FAD"
                    }).then(() => {
                        setTimeout(() => {
                            const isSelectPicker = $(primerCampoVacio).hasClass('selectpicker');
                            if (isSelectPicker) {
                                $(primerCampoVacio).selectpicker('toggle');
                            } else {
                                primerCampoVacio.focus();
                            }
                            primerCampoVacio.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        }, 100);
                    });

                    return false;
                }

                this.submit();
            });
        });
    </script>
}