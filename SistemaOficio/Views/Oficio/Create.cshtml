@model OfiGest.Models.OficioModel

@{
    ViewData["Title"] = "Crear Oficio";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .btn-azul {
        background-color: #3D6FAD;
        color: white;
        width: 100%;
        padding: 0.75rem;
        font-weight: bold;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

        .btn-azul:hover {
            background-color: #2f5c91;
            color: white;
        }

    .form-label span {
        font-weight: normal;
    }

    .card-body {
        padding: 2rem;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .bootstrap-select .dropdown-toggle {
        border: 1px solid #ced4da;
        border-radius: .25rem;
        background: white;
    }


    .bootstrap-select .dropdown-menu li.selected > a {
        background-color: #3D6FAD !important;
        color: white !important;
    }

    .editor-wrapper {
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
        box-sizing: border-box;
    }

    .note-editor.note-frame {
        border: 1px solid #ced4da;
        border-radius: 4px;
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
        margin-bottom: 0;
        overflow-x: hidden;
    }

    .note-editor .note-editable {
        min-height: 400px;
        max-height: 400px;
        overflow-y: auto;
        overflow-x: hidden;
        padding: 1rem;
        background-color: white;
        font-family: 'Arial', sans-serif;
        font-size: 14px;
        line-height: 1.5;
        word-break: break-word;
        white-space: normal;
        overflow-wrap: break-word;
    }

        .note-editor .note-editable img,
        .note-editor .note-editable table {
            max-width: 100%;
            height: auto;
        }

    .note-toolbar {
        background-color: #f8f9fa;
        border-bottom: 1px solid #ced4da;
        padding: 0.5rem;
        position: relative;
        z-index: 1;
    }

    .summernote-container {
        height: 400px;
        display: flex;
        flex-direction: column;
    }

    .is-invalid {
        border-color: #dc3545;
    }

    .card-adjusted {
        height: 800px;
        flex-direction: column;
        justify-content: space-between;
        margin-top: 1rem;
        margin-bottom: 2rem;
        padding: 2rem;
    }

    .form-check-input:checked {
        background-color: #0B5926;
        border-color: #0B5926;
    }

    .descarga-info {
        font-size: 0.85rem;
        color: #6c757d;
        margin-top: 5px;
    }

    .compatibilidad-alert {
        font-size: 0.85rem;
        padding: 0.5rem 0.75rem;
        margin-bottom: 1rem;
    }

        .compatibilidad-alert i {
            margin-right: 0.5rem;
        }

    .toolbar-compatible {
        background: #e8f5e8;
        border-left: 4px solid #0B5926;
    }

    .col-md-12 {
        min-width: 0;
    }

   
    .note-editable[spellcheck="true"] {
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        font-kerning: normal;
    }

    .spellcheck-info {
        background: #e7f3ff;
        border-left: 4px solid #3D6FAD;
    }

    .spellcheck-warning {
        background: #fff3cd;
        border-left: 4px solid #ffc107;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 0.5rem;
    }
</style>

<form asp-action="Create" method="post" autocomplete="off" id="formCreate">
    <div class="container-fluid d-flex flex-column compact-container">
        @Html.AntiForgeryToken()

        <h4 class="mt-3 mb-3">Crear Oficio</h4>
        <div class="card shadow-sm border-0 p-4 card-adjusted">

            <div class="row mb-3">
                <!-- Tipo de Oficio -->
                <div class="col-md-4">
                    <label asp-for="TipoOficioId" class="form-label">@Html.DisplayNameFor(m => m.TipoOficioId)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-file-earmark-text"></i></span>
                        <select asp-for="TipoOficioId"
                                asp-items="ViewBag.TiposOficio"
                                class="form-control selectpicker"
                                data-live-search="true"
                                data-size="5"
                                required>
                            <option value="">Seleccione un tipo de oficio</option>
                        </select>
                    </div>
                    <span asp-validation-for="TipoOficioId" class="text-danger d-none"></span>
                </div>

                <!-- Vía -->
                <div class="col-md-4">
                    <label asp-for="Via" class="form-label">@Html.DisplayNameFor(m => m.Via)</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-arrow-right-square"></i></span>
                        <input asp-for="Via" class="form-control" placeholder="Ej: Por conducto del Director" maxlength="100" />
                    </div>
                    <span asp-validation-for="Via" class="text-danger d-none"></span>
                </div>

                <!-- Dirigido a Departamento -->
                <div class="col-md-4">
                    <label asp-for="DirigidoDepartamento" class="form-label">@Html.DisplayNameFor(m => m.DirigidoDepartamento)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-building"></i></span>
                        <select asp-for="DirigidoDepartamento"
                                asp-items="ViewBag.Departamentos"
                                class="form-control selectpicker"
                                data-live-search="true"
                                data-size="5"
                                required>
                            <option value="">Seleccione un departamento</option>
                        </select>
                    </div>
                    <span asp-validation-for="DirigidoDepartamento" class="text-danger d-none"></span>
                </div>
            </div>

            <!-- Anexos -->
            <div class="row mb-3">
                <div class="col-md-12">
                    <label asp-for="Anexos" class="form-label">@Html.DisplayNameFor(m => m.Anexos)</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-link-45deg"></i></span>
                        <input asp-for="Anexos" type="url" class="form-control" placeholder="Ej: https://documentos.opret.gob.do/informe123.pdf" maxlength="500" />
                    </div>
                    <span asp-validation-for="Anexos" class="text-danger d-none"></span>
                </div>
            </div>

            <!-- Contenido -->
            <div class="row mb-3">
                <div class="col-md-12">
                    <label asp-for="Contenido" class="form-label">@Html.DisplayNameFor(m => m.Contenido)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <input type="hidden" asp-for="Contenido" />
                    <div class="editor-wrapper">
                        <div class="summernote-container">
                            <div id="summernote"></div>
                        </div>
                    </div>
                    <span asp-validation-for="Contenido" class="text-danger d-none"></span>
                </div>
            </div>

            <!-- Generar PDF -->
            <div class="col-md-6 mb-1">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="Descargar" name="Descargar" value="true" checked />
                    <label class="form-check-label" for="Descargar">
                        <strong>Generar y descargar PDF</strong>
                    </label>
                    <div class="descarga-info">
                        El Oficio se generará automáticamente y se descargará como PDF.
                    </div>
                </div>
            </div>

            <!-- Botón de envío -->
            <div class="mt-auto">
                <button type="submit" id="submitBtn" class="btn btn-azul d-flex justify-content-center align-items-center gap-2 w-100">
                    GENERAR OFICIO
                </button>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Summernote CSS y JS -->
    <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.js"></script>

    <!-- Incluir Summernote en español -->
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/lang/summernote-es-ES.min.js"></script>

    <!-- Font Awesome para íconos -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <script>
            $(document).ready(function () {
            // Mostrar advertencia si existe
            const warningMessage = '@Html.Raw(TempData["Warning"]?.ToString())';
            const ValidacionMessage = '@Html.Raw(TempData["Validacion"]?.ToString())';
            if (warningMessage) {
                 Swal.fire({
                     icon: "warning",
                     title: "¡Atención!",
                     text: warningMessage,
                     confirmButtonText: "Entendido",
                     confirmButtonColor: "#3D6FAD"
                 });
             } else if (ValidacionMessage) {
                 Swal.fire({
                     icon: "error",
                     title: "¡Atención!",
                     text: ValidacionMessage,
                     confirmButtonText: "Entendido",
                     confirmButtonColor: "#3D6FAD"
                 });
             }

        // Variables de control
        let componentesInicializados = false;
        let enviandoFormulario = false;

        // Función para eliminar solo espacios al principio
        function limpiarEspaciosInicio(texto) {
            if (typeof texto !== 'string') return '';
            return texto.replace(/^\s+/, '');
        }

        function configurarValidacionEspacios() {
            // Prevenir espacios al principio mientras se escribe
            $('input, textarea').on('keydown', function (e) {
                if (e.keyCode === 32 || e.key === ' ') {
                    const cursorPos = this.selectionStart;
                    const cursorAlInicio = cursorPos === 0;
                    const textoVacio = this.value === '';

                    if (cursorAlInicio || textoVacio) {
                        e.preventDefault();
                        return false;
                    }
                }
            });

            // Prevenir pegado de contenido con espacios al principio
            $('input, textarea').on('paste', function (e) {
                const clipboardData = e.originalEvent.clipboardData || window.clipboardData;
                const pastedText = clipboardData.getData('text');

                if (pastedText && pastedText.match(/^\s/)) {
                    e.preventDefault();
                    const textoLimpio = limpiarEspaciosInicio(pastedText);
                    const startPos = this.selectionStart;
                    const endPos = this.selectionEnd;

                    this.value = this.value.substring(0, startPos) + textoLimpio + this.value.substring(endPos);
                    this.selectionStart = this.selectionEnd = startPos + textoLimpio.length;
                }
            });

            // Limpiar espacios al principio en blur
            $('input, textarea').on('blur', function () {
                const valorOriginal = $(this).val();
                const valorLimpio = limpiarEspaciosInicio(valorOriginal);

                if (valorOriginal !== valorLimpio) {
                    $(this).val(valorLimpio);
                }
            });
        }

        function inicializarComponentes() {
            if (componentesInicializados) {
                return;
            }

            // Aplicar validación de espacios
            configurarValidacionEspacios();

            // 1. Inicializar bootstrap-select
            $('.selectpicker').selectpicker();

            // 2. Configuración de Summernote
              $('#summernote').summernote({
            lang: 'es-ES',
            height: 400,
            maxHeight: 400,
            spellCheck: true,
            toolbar: [
                ['style', ['bold', 'italic', 'underline', 'clear']],
                ['para', ['ul', 'ol', 'paragraph']],
                ['misc', ['undo', 'redo']]
            ],
            fontNames: ['Arial', 'Times New Roman', 'Verdana', 'Georgia'],
            fontSizeUnits: ['px', 'pt'],
            placeholder: 'Escriba el contenido del oficio aquí...',
            disableDragAndDrop: true,
            shortcuts: false,
            callbacks: {
                onInit: function () {
                    console.log('Editor inicializado');
                    const editableElement = $('.note-editable');
                    editableElement.attr('spellcheck', 'true');
                    editableElement.attr('contenteditable', 'true');

                    // ← Inyectar contenido del modelo si existe
                    const contenidoInicial = $('input[name="Contenido"]').val();
                    if (contenidoInicial) {
                        $('#summernote').summernote('code', contenidoInicial);
                    }
                },
                onChange: function (contents) {
                    const contenidoLimpio = limpiarHtmlCompatible(contents);
                    $('input[name="Contenido"]').val(contenidoLimpio);
                },
                onPaste: function (e) {
                    var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('Text');
                    e.preventDefault();
                    document.execCommand('insertText', false, bufferText);
                }
            }
        });

            // 3. Configurar validación del formulario
            configurarValidacionFormulario();

            componentesInicializados = true;
        }

        function configurarValidacionFormulario() {
            const viaInput = $('[name="Via"]');
            const anexosInput = $('[name="Anexos"]');
            const submitBtn = $('#submitBtn');

            // Función para obtener contenido de Summernote
            const getSummernoteContent = () => {
                const html = $('#summernote').summernote('code');
                const contenidoLimpio = limpiarHtmlCompatible(html);
                return contenidoLimpio === '<p><br></p>' || contenidoLimpio.trim() === '' ? '' : contenidoLimpio.trim();
            };

            $('#formCreate').on('submit', function (e) {
                if (enviandoFormulario) {
                    return;
                }

                e.preventDefault();

                // Limpiar espacios al principio antes de enviar
                $('input, textarea').each(function() {
                    const valorOriginal = $(this).val();
                    const valorLimpio = limpiarEspaciosInicio(valorOriginal);
                    if (valorOriginal !== valorLimpio) {
                        $(this).val(valorLimpio);
                    }
                });

                // Obtener contenido de Summernote
                const contenidoActual = getSummernoteContent();
                $('input[name="Contenido"]').val(contenidoActual);

                // Validar campos obligatorios
                const camposObligatorios = [
                    { name: 'TipoOficioId', nombre: 'Tipo de oficio' },
                    { name: 'DirigidoDepartamento', nombre: 'Departamento destino' },
                    { name: 'Contenido', nombre: 'Contenido' }
                ];

                const camposInvalidos = camposObligatorios.filter(field => {
                    const campo = $(`[name="${field.name}"]`);
                    if (!campo.length) return false;

                    if (field.name === 'Contenido') {
                        const plainText = contenidoActual.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
                        return !plainText || plainText === '';
                    }

                    const value = campo.val();
                    return !value || value.trim() === '';
                });

                if (camposInvalidos.length > 0) {
                    Swal.fire({
                       title: '<span>Campos requeridos (<span style="color:#dc3545">*</span>)</span>',
                        text: "Por favor complete todos los campos obligatorios.",
                        icon: 'warning',
                        confirmButtonText: 'Entendido',
                        confirmButtonColor: '#3D6FAD'
                    });
                    return;
                }

                // Validar URL de anexos si se proporciona
                const anexosUrl = anexosInput.val().trim();
                if (anexosUrl && !esUrlValida(anexosUrl)) {
                    Swal.fire({
                        title: 'URL inválida',
                        text: 'Por favor, ingrese una URL válida para los anexos.',
                        icon: 'warning',
                        confirmButtonText: 'Entendido',
                        confirmButtonColor: '#3D6FAD'
                    });
                    return;
                }

                // Deshabilitar botón y mostrar loading
                enviandoFormulario = true;
                submitBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generando...');

                // Timeout de seguridad
                setTimeout(() => {
                    if (submitBtn.prop('disabled')) {
                        submitBtn.prop('disabled', false).html('GENERAR OFICIO');
                        Swal.fire({
                            title: "Tiempo de espera agotado",
                            text: "La operación está tomando más tiempo de lo esperado. Por favor, intente nuevamente.",
                            icon: "warning",
                            confirmButtonText: "Entendido",
                            confirmButtonColor: "#3D6FAD"
                        });
                        enviandoFormulario = false;
                    }
                }, 10000);

                // Enviar formulario
                this.submit();
            });
        }

        function limpiarHtmlCompatible(html) {
            if (!html || html.trim() === '') return '';

            try {
                const etiquetasPermitidas = ['p', 'br', 'b', 'strong', 'i', 'em', 'u', 'ul', 'ol', 'li'];
                const tempDiv = document.createElement("div");
                tempDiv.innerHTML = html;

                function limpiarElemento(elemento) {
                    while (elemento.attributes.length > 0) {
                        elemento.removeAttribute(elemento.attributes[0].name);
                    }

                    for (let i = elemento.childNodes.length - 1; i >= 0; i--) {
                        const node = elemento.childNodes[i];

                        if (node.nodeType === Node.ELEMENT_NODE) {
                            const tagName = node.tagName.toLowerCase();

                            if (etiquetasPermitidas.includes(tagName)) {
                                limpiarElemento(node);
                            } else if (tagName === 'span') {
                                const fragment = document.createDocumentFragment();
                                while (node.firstChild) {
                                    fragment.appendChild(node.firstChild);
                                }
                                elemento.replaceChild(fragment, node);
                            } else {
                                const fragment = document.createDocumentFragment();
                                while (node.firstChild) {
                                    fragment.appendChild(node.firstChild);
                                }
                                elemento.replaceChild(fragment, node);
                            }
                        }
                    }
                }

                limpiarElemento(tempDiv);

                let htmlLimpio = tempDiv.innerHTML;

                htmlLimpio = htmlLimpio
                    .replace(/<strong>/g, '<b>').replace(/<\/strong>/g, '</b>')
                    .replace(/<em>/g, '<i>').replace(/<\/em>/g, '</i>')
                    .replace(/&nbsp;/g, ' ')
                    .replace(/\s+/g, ' ')
                    .trim();

                if (!htmlLimpio.startsWith('<p>') && !htmlLimpio.startsWith('<ul>') && !htmlLimpio.startsWith('<ol>')) {
                    htmlLimpio = '<p>' + htmlLimpio + '</p>';
                }

                return htmlLimpio;

            } catch (error) {
                console.error('Error limpiando HTML:', error);
                const textoPlano = html.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
                return '<p>' + textoPlano + '</p>';
            }
        }

        function esUrlValida(url) {
            try {
                new URL(url);
                return true;
            } catch {
                return false;
            }
        }


            // Inicializar componentes
            inicializarComponentes();

            // Rehabilitar botón si hay error de validación del servidor
            if ('@ViewContext.ViewData.ModelState.IsValid' === 'False') {
                $('#submitBtn').prop('disabled', false).html('GENERAR OFICIO');
                enviandoFormulario = false;
            }
        });
    </script>
}