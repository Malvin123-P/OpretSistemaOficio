@model OfiGest.Models.OficioModel

@{
    ViewData["Title"] = "Crear Oficio";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .btn-azul {
        background-color: #3D6FAD;
        color: white;
        width: 100%;
        padding: 0.75rem;
        font-weight: bold;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

        .btn-azul:hover {
            background-color: #2f5c91;
            color: white;
        }

    .form-label span {
        font-weight: normal;
    }

    .card-body {
        padding: 2rem;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .bootstrap-select .dropdown-toggle {
        border: 1px solid #ced4da;
        border-radius: .25rem;
        background: white;
    }

    .editor-wrapper {
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
        box-sizing: border-box;
    }

    .note-editor.note-frame {
        border: 1px solid #ced4da;
        border-radius: 4px;
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
        margin-bottom: 0;
        overflow-x: hidden;
    }

    .note-editor .note-editable {
        min-height: 400px;
        max-height: 400px;
        overflow-y: auto;
        overflow-x: hidden;
        padding: 1rem;
        background-color: white;
        font-family: 'Arial', sans-serif;
        font-size: 14px;
        line-height: 1.5;
        word-break: break-word;
        white-space: normal;
        overflow-wrap: break-word;
    }

        .note-editor .note-editable img,
        .note-editor .note-editable table {
            max-width: 100%;
            height: auto;
        }

    .note-toolbar {
        background-color: #f8f9fa;
        border-bottom: 1px solid #ced4da;
        padding: 0.5rem;
        position: relative;
        z-index: 1;
    }

    .summernote-container {
        height: 400px;
        display: flex;
        flex-direction: column;
    }

    .is-invalid {
        border-color: #dc3545;
    }

    .card-adjusted {
        height: 800px;
        flex-direction: column;
        justify-content: space-between;
        margin-top: 1rem;
        margin-bottom: 2rem;
        padding: 2rem;
    }

    .form-check-input:checked {
        background-color: #0B5926;
        border-color: #0B5926;
    }

    .descarga-info {
        font-size: 0.85rem;
        color: #6c757d;
        margin-top: 5px;
    }

    .compatibilidad-alert {
        font-size: 0.85rem;
        padding: 0.5rem 0.75rem;
        margin-bottom: 1rem;
    }

        .compatibilidad-alert i {
            margin-right: 0.5rem;
        }

    .toolbar-compatible {
        background: #e8f5e8;
        border-left: 4px solid #28a745;
    }

    .col-md-12 {
        min-width: 0;
    }

   
    .note-editable[spellcheck="true"] {
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        font-kerning: normal;
    }

    .spellcheck-info {
        background: #e7f3ff;
        border-left: 4px solid #3D6FAD;
    }

    .spellcheck-warning {
        background: #fff3cd;
        border-left: 4px solid #ffc107;
    }
</style>

<form asp-action="Create" method="post" autocomplete="off" id="formCreate">
    <div class="container-fluid d-flex flex-column compact-container">
        @Html.AntiForgeryToken()

        <h4 class="mt-3 mb-3">Crear Oficio</h4>
        <div class="card shadow-sm border-0 p-4 card-adjusted">
            <div class="row mb-3">
                <div class="col-md-4">
                    <label asp-for="TipoOficioId" class="form-label">@Html.DisplayNameFor(m => m.TipoOficioId)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <select asp-for="TipoOficioId"
                            asp-items="ViewBag.TiposOficio"
                            class="form-control selectpicker"
                            data-live-search="true"
                            data-size="5"
                            required>
                        <option value="">Seleccione un tipo de oficio</option>
                    </select>
                    <span asp-validation-for="TipoOficioId" class="text-danger d-none"></span>
                </div>

                <div class="col-md-4">
                    <label asp-for="Via" class="form-label">@Html.DisplayNameFor(m => m.Via)</label>
                    <input asp-for="Via" class="form-control" placeholder="Ej: Por conducto del Director" maxlength="100" />
                    <span asp-validation-for="Via" class="text-danger d-none"></span>
                </div>

                <div class="col-md-4">
                    <label asp-for="DirigidoDepartamento" class="form-label">@Html.DisplayNameFor(m => m.DirigidoDepartamento)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <select asp-for="DirigidoDepartamento"
                            asp-items="ViewBag.Departamentos"
                            class="form-control selectpicker"
                            data-live-search="true"
                            data-size="5"
                            required>
                        <option value="">Seleccione un departamento</option>
                    </select>
                    <span asp-validation-for="DirigidoDepartamento" class="text-danger d-none"></span>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-12">
                    <label asp-for="Anexos" class="form-label">@Html.DisplayNameFor(m => m.Anexos)</label>
                    <input asp-for="Anexos" type="url" class="form-control" placeholder="Ej: https://documentos.opret.gob.do/informe123.pdf" maxlength="500" />
                    <span asp-validation-for="Anexos" class="text-danger d-none"></span>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-12">
                    <label asp-for="Contenido" class="form-label">@Html.DisplayNameFor(m => m.Contenido)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>

                    <input type="hidden" asp-for="Contenido" />
                    <div class="editor-wrapper">
                        <div class="summernote-container">
                            <div id="summernote"></div>
                        </div>
                    </div>

                    <span asp-validation-for="Contenido" class="text-danger d-none"></span>
                </div>
            </div>

            <div class="col-md-6 mb-1">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="Descargar" name="Descargar" value="true" checked />
                    <label class="form-check-label" for="Descargar">
                        <strong>Generar y descargar PDF</strong>
                    </label>
                    <div class="descarga-info">
                        El Oficio se generará automáticamente y se descargará como PDF.
                    </div>
                </div>
            </div>

            <div class="mt-auto">
                <button type="submit" class="btn btn-azul d-flex justify-content-center align-items-center gap-2 w-100" id="btnSubmit">
                    GENERAR OFICIO
                </button>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Summernote CSS y JS -->
    <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.js"></script>

    <!-- Incluir Summernote en español -->
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/lang/summernote-es-ES.min.js"></script>

    <!-- Font Awesome para íconos -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <script>
        let componentesInicializados = false;
        let enviandoFormulario = false;

        function verificarSoporteSpellcheck() {
            const testElement = document.createElement('div');
            testElement.setAttribute('spellcheck', 'true');
            testElement.setAttribute('contenteditable', 'true');

            const soporteCompleto = 'spellcheck' in testElement &&
                                   'contentEditable' in document.documentElement;

            if (!soporteCompleto) {
                console.warn('Spellcheck nativo limitado en este navegador');

                // Mostrar mensaje al usuario
                $('#spellcheckInfo')
                    .removeClass('spellcheck-info')
                    .addClass('spellcheck-warning')
                    .html('<i class="fas fa-exclamation-triangle"></i>' +
                         '<strong>Corrección limitada:</strong> ' +
                         'Para mejor corrección ortográfica, use Chrome, Edge o Firefox actualizado. ' +
                         '<span class="text-muted">(Puede usar F7 para verificar ortografía)</span>');
            }

            return soporteCompleto;
        }

        function configurarEventosTeclado() {
            const editable = $('.note-editable');

            // Mejorar la experiencia de escritura
            editable.on('keydown', function(e) {
                // Permitir que el navegador maneje la corrección con F7
                if (e.key === 'F7') {
                    // El navegador manejará el spellcheck con F7 automáticamente
                    console.log('Verificación ortográfica activada (F7)');
                }

                // Reforzar spellcheck después de escribir
                if (e.key.length === 1 || e.key === 'Backspace' || e.key === 'Delete') {
                    setTimeout(() => {
                        $(this).attr('spellcheck', 'true');
                    }, 100);
                }
            });

            // Reforzar spellcheck después de cambios
            editable.on('input', function() {
                $(this).attr('spellcheck', 'true');
            });

            // Manejar clic derecho para asegurar spellcheck
            editable.on('contextmenu', function() {
                $(this).attr('spellcheck', 'true');
            });
        }

        function inicializarComponentes() {
            if (componentesInicializados) {
                return;
            }

            // 1. Inicializar bootstrap-select
            $('.selectpicker').selectpicker();

            // 2. Configuración MEJORADA de Summernote con spellcheck
            $('#summernote').summernote({
                lang: 'es-ES',
                height: 400,
                maxHeight: 400,

                // HABILITAR CORRECCIÓN ORTOGRÁFICA
                spellCheck: true,

                // Toolbar simplificado y compatible
                toolbar: [
                    ['style', ['bold', 'italic', 'underline', 'clear']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['misc', ['undo', 'redo']]
                ],

                fontNames: ['Arial', 'Times New Roman', 'Verdana', 'Georgia'],
                fontSizeUnits: ['px', 'pt'],
                placeholder: 'Escriba el contenido del oficio aquí...',
                disableDragAndDrop: true,
                shortcuts: false,

                // Configuración MEJORADA para spellcheck
                callbacks: {
                    onInit: function() {
                        console.log('Editor inicializado - Spellcheck activado');

                        // FORZAR spellcheck en el área editable
                        const editableElement = $('.note-editable');
                        editableElement.attr('spellcheck', 'true');
                        editableElement.attr('contenteditable', 'true');

                        // Aplicar estilos adicionales para mejor spellcheck
                        editableElement.css({
                            'text-rendering': 'optimizeLegibility',
                            'font-size': '14px',
                            'line-height': '1.5',
                            'font-family': 'Arial, sans-serif'
                        });

                        // Marcar toolbar como compatible
                        $('.note-toolbar').addClass('toolbar-compatible');

                        const initialContent = $('input[name="Contenido"]').val();
                        if (initialContent) {
                            $('#summernote').summernote('code', initialContent);
                        }

                        // Configurar eventos de teclado para mejor experiencia
                        configurarEventosTeclado();

                        // Verificar soporte de spellcheck
                        verificarSoporteSpellcheck();
                    },
                    onChange: function(contents) {
                        const contenidoLimpio = limpiarHtmlCompatible(contents);
                        $('input[name="Contenido"]').val(contenidoLimpio);
                    },
                    onPaste: function(e) {
                        // Limpiar formato al pegar pero mantener texto
                        var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('Text');
                        e.preventDefault();

                        // Insertar texto manteniendo el spellcheck
                        document.execCommand('insertText', false, bufferText);

                        // Reforzar spellcheck después de pegar
                        setTimeout(() => {
                            const editable = $('.note-editable');
                            editable.attr('spellcheck', 'true');
                        }, 100);
                    },
                    onBlur: function() {
                        // Asegurar que el spellcheck permanezca activo
                        $('.note-editable').attr('spellcheck', 'true');
                    },
                    onFocus: function() {
                        // Reactivar spellcheck al enfocar
                        $('.note-editable').attr('spellcheck', 'true');
                    }
                }
            });

            // 3. Configurar validación del formulario
            configurarValidacionFormulario();

            componentesInicializados = true;
        }

        function configurarValidacionFormulario() {
            $('#formCreate').on('submit', function (e) {
                if (enviandoFormulario) {
                    return;
                }

                e.preventDefault();

                // Obtener contenido de Summernote
                const contenidoHTML = $('#summernote').summernote('code');
                const contenidoLimpio = limpiarHtmlCompatible(contenidoHTML);
                $('input[name="Contenido"]').val(contenidoLimpio);

                // Validar campos obligatorios
                const camposObligatorios = [
                    { selector: '[name="DirigidoDepartamento"]', nombre: 'Departamento destino' },
                    { selector: '[name="TipoOficioId"]', nombre: 'Tipo de oficio' },
                    { selector: '[name="Contenido"]', nombre: 'Contenido' }
                ];

                const camposInvalidos = camposObligatorios.filter(campo => {
                    const elemento = document.querySelector(campo.selector);
                    if (!elemento) return true;

                    if (campo.selector === '[name="Contenido"]') {
                        const textoPlano = contenidoLimpio.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
                        return !textoPlano || textoPlano === '';
                    }

                    return !elemento.value.trim();
                });

                if (camposInvalidos.length > 0) {
                    const camposFaltantes = camposInvalidos.map(c => c.nombre).join(', ');
                    Swal.fire({
                        title: '<span>Campos requeridos (<span style="color:#dc3545">*</span>)</span>',
                        text: "Por favor complete todos los campos obligatorios.",
                        icon: 'warning',
                        confirmButtonText: 'Entendido',
                        confirmButtonColor: '#3D6FAD'
                    });
                    return;
                }

                // Validar URL de anexos si se proporciona - SOLO SWAL, SIN ESTILOS EN EL INPUT
                const anexosUrl = $('[name="Anexos"]').val().trim();
                if (anexosUrl && !esUrlValida(anexosUrl)) {
                    Swal.fire({
                        title: 'URL inválida',
                        text: 'Por favor, ingrese una URL válida para los anexos.',
                        icon: 'warning',
                        confirmButtonText: 'Entendido',
                        confirmButtonColor: '#3D6FAD'
                    });
                    return;
                }

                // Deshabilitar botón para evitar múltiples envíos
                enviandoFormulario = true;
                $('#btnSubmit').prop('disabled', true).html('GENERANDO...');

                // Enviar formulario directamente
                setTimeout(() => {
                    // Remover el event listener temporalmente para evitar loop
                    $('#formCreate').off('submit');

                    // Enviar el formulario
                    document.getElementById('formCreate').submit();
                }, 300);
            });
        }

        function limpiarHtmlCompatible(html) {
            if (!html || html.trim() === '') return '';

            try {
                // Etiquetas permitidas (compatibles con PDF)
                const etiquetasPermitidas = ['p', 'br', 'b', 'strong', 'i', 'em', 'u', 'ul', 'ol', 'li'];

                // Crear elemento temporal
                const tempDiv = document.createElement("div");
                tempDiv.innerHTML = html;

                // Función para limpiar recursivamente
                function limpiarElemento(elemento) {
                    // Remover todos los atributos (estilos, clases, etc.)
                    while (elemento.attributes.length > 0) {
                        elemento.removeAttribute(elemento.attributes[0].name);
                    }

                    // Procesar hijos
                    for (let i = elemento.childNodes.length - 1; i >= 0; i--) {
                        const node = elemento.childNodes[i];

                        if (node.nodeType === Node.ELEMENT_NODE) {
                            const tagName = node.tagName.toLowerCase();

                            if (etiquetasPermitidas.includes(tagName)) {
                                // Mantener etiquetas permitidas y limpiar sus hijos
                                limpiarElemento(node);
                            } else if (tagName === 'span') {
                                // Convertir spans a texto manteniendo hijos
                                const fragment = document.createDocumentFragment();
                                while (node.firstChild) {
                                    fragment.appendChild(node.firstChild);
                                }
                                elemento.replaceChild(fragment, node);
                            } else {
                                // Reemplazar etiquetas no permitidas por su contenido
                                const fragment = document.createDocumentFragment();
                                while (node.firstChild) {
                                    fragment.appendChild(node.firstChild);
                                }
                                elemento.replaceChild(fragment, node);
                            }
                        }
                    }
                }

                limpiarElemento(tempDiv);

                // Obtener HTML limpio
                let htmlLimpio = tempDiv.innerHTML;

                // Normalizar etiquetas equivalentes
                htmlLimpio = htmlLimpio
                    .replace(/<strong>/g, '<b>').replace(/<\/strong>/g, '</b>')
                    .replace(/<em>/g, '<i>').replace(/<\/em>/g, '</i>')
                    .replace(/&nbsp;/g, ' ')
                    .replace(/\s+/g, ' ')
                    .trim();

                // Asegurar que tenga al menos un párrafo
                if (!htmlLimpio.startsWith('<p>') && !htmlLimpio.startsWith('<ul>') && !htmlLimpio.startsWith('<ol>')) {
                    htmlLimpio = '<p>' + htmlLimpio + '</p>';
                }

                return htmlLimpio;

            } catch (error) {
                console.error('Error limpiando HTML:', error);
                // Fallback: mantener solo texto básico con párrafos
                const textoPlano = html.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
                return '<p>' + textoPlano + '</p>';
            }
        }

        function esUrlValida(url) {
            try {
                new URL(url);
                return true;
            } catch {
                return false;
            }
        }

        function protegerComponentes() {
            // Prevenir interferencias
            $(document).on('DOMNodeInserted', function(e) {
                const target = $(e.target);
                if (target.hasClass('notificacion-item-usuario') ||
                    target.closest('.dropdown-notificaciones-usuario').length) {
                    return;
                }
            });
        }

        $(document).ready(function () {
            // Inicializar componentes
            inicializarComponentes();
            protegerComponentes();

            // Manejar errores de conexión
            $(document).ajaxError(function(event, jqxhr, settings, thrownError) {
                if (jqxhr.status === 0) {
                    Swal.fire({
                        title: 'Error de conexión',
                        text: 'No se pudo conectar al servidor. Verifique su conexión a internet.',
                        icon: 'error',
                        confirmButtonText: 'Entendido',
                        confirmButtonColor: '#3D6FAD'
                    });
                    enviandoFormulario = false;
                    $('#btnSubmit').prop('disabled', false).html('GENERAR OFICIO');
                }
            });

            // Configurar eventos del editor
            $(document).on('click', '.note-btn', function() {
                setTimeout(function() {
                    const editable = $('.note-editable');
                    if (editable.length) {
                        editable.css('overflow-y', 'auto');
                        // Reforzar spellcheck después de acciones de toolbar
                        editable.attr('spellcheck', 'true');
                    }
                }, 50);
            });

            // Manejar el cambio en el checkbox de descarga PDF
            $('#Descargar').on('change', function() {
                const label = $(this).next('.form-check-label');
                if (this.checked) {
                    label.css('font-weight', 'bold');
                } else {
                    label.css('font-weight', 'normal');
                }
            });

            // REMOVIDO: Validación en tiempo real para campos de texto
            // Ya no se muestra el mensaje de error ni se pone rojo el input

            // Botón de ejemplo (opcional - puedes remover si no lo necesitas)
            $('#btn-ejemplo').on('click', function() {
                const contenidoEjemplo = `
        <p>Por medio del presente oficio, <b>solicitamos amablemente</b> la siguiente información:</p>

        <ul>
        <li>Documentación requerida para el proceso</li>
        <li>Informes técnicos del área correspondiente</li>
        <li>Presupuesto detallado del proyecto</li>
        </ul>

        <p>Esperamos su <i>pronta respuesta</i> para dar continuidad al proceso.</p>
                `.trim();

                $('#summernote').summernote('code', contenidoEjemplo);
            });

            // Restaurar estado del botón si hay una recarga de página
            $(window).on('beforeunload', function() {
                if (enviandoFormulario) {
                    $('#btnSubmit').prop('disabled', false).html('GENERAR OFICIO');
                }
            });
        });

        // Función para reinicializar si es necesario
        function reinicializarComponentes() {
            if (componentesInicializados) {
                try {
                    $('.selectpicker').selectpicker('refresh');
                } catch (error) {
                    console.log('Error al refrescar selectpicker:', error);
                    $('.selectpicker').selectpicker();
                }
            }
        }

        // Exponer función global
        window.reinicializarComponentesCreate = reinicializarComponentes;
    </script>
}