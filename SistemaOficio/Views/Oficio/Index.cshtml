@model IEnumerable<OfiGest.Models.OficioModel>

@{
    ViewData["Title"] = "Inicio";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var rolUsuario = Context.Session.GetString("RolUsuario");
}


<style>

    .bootstrap-select .dropdown-toggle {
        border: 1px solid #ced4da;
        border-radius: .25rem;
        background: white;
    }


    .bootstrap-select .dropdown-menu li.selected > a {
        background-color: #3D6FAD !important;
        color: white !important;
    }

    .fixed-header thead th {
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 2;
    }

    .btn-azul {
        background-color: #3D6FAD;
        color: white;
        width: 100%;
        padding: 0.75rem;
        font-weight: bold;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

        .btn-azul:hover {
            background-color: #2f5c91;
            color: white;
        }

    .card-adjusted {
        height: 700px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        margin-top: 1rem;
        margin-bottom: 2rem;
        padding: 2rem;
    }

    .btn-sm {
        background-color: #3D6FAD;
        color: white;
    }

        .btn-sm:hover {
            background-color: #2f5c91;
            color: white;
        }

    .filtro-select {
        min-width: 100%;
    }

    .btn-excel {
        background-color: #0B5926;
        color: white;
        font-weight: bold;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        transition: background-color 0.3s ease;
        border: none;
    }

        .btn-excel:hover {
            background-color: #09491F;
            color: white;
        }

    .estado-deshabilitado {
        color: #dc3545;
        font-weight: 600;
    }
    /* Estilos para el hover de las filas de la tabla */
    .table-scroll tbody tr {
        transition: background-color 0.2s ease;
        cursor: pointer;
    }

        .table-scroll tbody tr:hover {
            background-color: #f5f5f5 !important;
        }

        /* Para mantener la apariencia de filas deshabilitadas incluso en hover */
        .table-scroll tbody tr.table-danger:hover {
            background-color: #f8d7da !important;
        }

    /* Asegurar que el header fijo se mantenga por encima */
    .fixed-header thead th {
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 10; /* Aumentar z-index para mayor seguridad */
        box-shadow: 0 2px 2px -1px rgba(0,0,0,0.1);
    }

    .badge-pendiente {
        background-color: #ffc107; /* Amarillo */
        color: #212529;
    }

    .badge-recibido {
        background-color: #28a745; /* Verde */
        color: white;
    }
</style>

<div class="container-fluid d-flex flex-column compact-container">
    <h4 class="mt-3 mb-3">Listado de Oficios</h4>

    <div class="card shadow-sm border-0 p-4 card-adjusted">
        <!-- Filtros -->
        <div class="d-flex flex-wrap gap-3 align-items-end mb-3">
            <!-- Departamento destino -->
            <div class="flex-grow-1">
                <label for="filtroDepartamento" class="form-label">Departamento destino</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-building"></i></span>
                    <select id="filtroDepartamento" asp-items="ViewBag.Departamentos" class="form-control selectpicker" data-size="5" data-live-search="true" title="Filtro de búsqueda">
                        <option value="">Todos</option>
                    </select>
                </div>
            </div>

            <!-- Usuario -->
            <div class="flex-grow-1">
                <label for="filtroUsuario" class="form-label">Usuario</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-person-fill"></i></span>
                    <select id="filtroUsuario" asp-items="ViewBag.UsuariosFiltro" class="form-control selectpicker" data-size="5" data-live-search="true" title="Filtro de búsqueda">
                        <option value="">Todos</option>
                    </select>
                </div>
            </div>

            <!-- Asunto -->
            <div class="flex-grow-1">
                <label for="filtroTipoOficio" class="form-label">Asunto</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-journal-text"></i></span>
                    <select id="filtroTipoOficio" asp-items="ViewBag.TiposOficio" class="form-control selectpicker" data-size="5" data-live-search="true" title="Filtro de búsqueda">
                        <option value="">Todos</option>
                    </select>
                </div>
            </div>

            <!-- Estado (solo para Usuarios) -->
            @if (rolUsuario == "Usuario")
            {
                <div class="flex-grow-1">
                    <label for="filtroComunicacion" class="form-label">Comunicación</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-chat-dots"></i></span>
                        <select id="filtroComunicacion" class="form-control selectpicker">
                            <option value="">Todos</option>
                            <option value="Pendiente">Solo Pendiente</option>
                            <option value="Recibido">Solo Recibido</option>
                        </select>
                    </div>
                </div>
            }


            <!-- Estado (solo para Administrador) -->
            @if (rolUsuario == "Administrador")
            {
                <div class="flex-grow-1">
                    <label for="filtroEstado" class="form-label">Estado</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-toggle-on"></i></span>
                        <select id="filtroEstado" class="form-control selectpicker">
                            <option value="">Todos</option>
                            <option value="activo">Solo activos</option>
                            <option value="deshabilitado">Solo inactivos</option>
                        </select>
                    </div>
                </div>
            }

            <!-- Botón Exportar -->
            <div>
                <label class="form-label d-block">&nbsp;</label>
                <button id="btnExportarExcel" class="btn-excel" title="Exportar Excel">Exportar</button>
            </div>
        </div>

        <!-- Tabla de resultados -->
        <div class="table-scroll mb-3">
            <table id="tablaOficios" class="table table-bordered table-striped align-middle mb-0 fixed-header">
                <thead>
                    <tr>
                        <th>Código</th>
                        <th>Fecha</th>
                        <th>Asunto</th>
                        <th>Creado por</th>
                        <th>Departamento destino</th>
                        <th>Comunicación</th>
                        @if (rolUsuario == "Administrador")
                        {
                            <th>Estado</th>
                        }
                        <th class="text-center">Acción</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var oficio in Model)
                    {
                        var claseFila = oficio.Estado ? "" : "table-danger";
                        <tr class="@claseFila">
                            <td>@oficio.Codigo</td>
                            <td>@oficio.FechaCreacion.ToString("dd/MM/yyyy")</td>
                            <td>@oficio.NombreTipoOficio</td>
                            <td>@oficio.NombreUsuario @oficio.ApellidoUsuario</td>
                            <td>@oficio.DirigidoDepartamento</td>
                            <td data-search="@oficio.EstadoVisual">
                                <span class="badge badge-estado @(oficio.EstadoVisual == "Pendiente" ? "badge-pendiente" : "badge-recibido")">
                                    @(oficio.EstadoVisual)
                                </span>
                            </td>
                            @if (rolUsuario == "Administrador")
                            {
                                <td>@(oficio.Estado ? "Activo" : "Deshabilitado")</td>
                            }
                            <td class="text-center d-flex justify-content-center gap-2">
                                @if (oficio.EstadoVisual != "Recibido")
                                {
                                    <a asp-controller="Oficio" asp-action="Edit" asp-route-id="@oficio.Id" class="btn btn-sm btn-outline-dark" title="Editar oficio">
                                        <i class="bi bi-pencil-square"></i>
                                    </a>
                                }
                                @if (oficio.Estado)
                                {
                                    <a asp-controller="Oficio" asp-action="Details" asp-route-id="@oficio.Id" class="btn btn-sm btn-outline-dark" title="Descargar oficio">
                                        <i class="bi bi-file-earmark-arrow-down"></i>
                                    </a>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Botón Crear oficio -->
        <div class="mt-auto">
            <a asp-controller="Oficio" asp-action="Create" class="btn btn-azul d-flex justify-content-center align-items-center gap-2 w-100">
                CREAR OFICIOS
            </a>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />

    <script>
        let componentesInicializados = false;
        let tabla;

        function inicializarComponentes() {
            if (componentesInicializados) {
                return;
            }

            // 1. Inicializar bootstrap-select
            $('.selectpicker').selectpicker();

            // 2. Inicializar DataTable
        tabla = $('#tablaOficios').DataTable({
            language: {
                decimal: ",",
                thousands: ".",
                info: "Mostrando del _START_ al _END_ de _TOTAL_ registros",
                infoEmpty: "Mostrando 0 registros",
                infoFiltered: "(filtrado de _MAX_ registros totales)",
                lengthMenu: "Mostrar _MENU_ registros",
                loadingRecords: "Cargando...",
                processing: "Procesando...",
                search: "Buscar:",
                zeroRecords: "No se encontraron resultados",
                paginate: {
                    first: "Primero",
                    last: "Último",
                    next: "Siguiente",
                    previous: "Anterior"
                }
            },
            pageLength: 8,
            order: [[0, 'desc']],
            dom: 'tip',
            autoWidth: false,
            responsive: true,
            paging: true,
            // Configuración específica para manejar estructura dinámica
            columnDefs: [
                {
                    // Hacer que DataTables ignore diferencias en el conteo de columnas
                    "targets": '_all',
                    "searchable": true,
                    "orderable": true
                }
            ],
            // Deshabilitar la verificación estricta del conteo de columnas
            initComplete: function(settings, json) {
                console.log('DataTable inicializado correctamente');
                console.log('Número de columnas detectadas:', this.api().columns().count());
            }
        });
            // 3. Configurar filtros
            function aplicarFiltros() {
            const usuario = $('#filtroUsuario').val()?.trim() || '';
            const departamento = $('#filtroDepartamento').val()?.trim() || '';
            const asunto = $('#filtroTipoOficio').val()?.trim() || '';
            const estado = $('#filtroEstado').val()?.trim().toLowerCase();
            const comunicacion = $('#filtroComunicacion').val()?.trim() || '';

            const esAdministrador = $('#tablaOficios thead th').length === 8; // 7 columnas + columna Estado

            // Determinar índices de columnas dinámicamente
            const columnaComunicacion = 5; // Siempre en posición 5
            const columnaEstado = 6; // Solo existe si es administrador
            const columnaAccion = esAdministrador ? 7 : 6; // La columna acción es la última

            // Aplicar filtros básicos (estos índices son fijos)
            tabla.columns(0).search(''); // Código
            tabla.columns(1).search(''); // Fecha
            tabla.columns(2).search(asunto); // Asunto (índice 2)
            tabla.columns(3).search(usuario); // Creado por (índice 3)
            tabla.columns(4).search(departamento); // Departamento destino (índice 4)

            // Filtro de comunicación (columna 5)
            if (comunicacion === "Pendiente") {
                tabla.columns(columnaComunicacion).search("^Pendiente$", true, false, true);
            } else if (comunicacion === "Recibido") {
                tabla.columns(columnaComunicacion).search("^Recibido$", true, false, true);
            } else {
                tabla.columns(columnaComunicacion).search('');
            }

            // Filtro de estado (solo para Administrador)
            if (esAdministrador) {
                if (estado === "activo") {
                    tabla.columns(columnaEstado).search("^Activo$", true, false, true);
                } else if (estado === "deshabilitado") {
                    tabla.columns(columnaEstado).search("^Deshabilitado$", true, false, true);
                } else {
                    tabla.columns(columnaEstado).search('');
                }
            }

            tabla.draw();
        }

            // Event listeners para los filtros
            $('#filtroUsuario, #filtroDepartamento, #filtroEstado, #filtroTipoOficio, #filtroComunicacion')
                .on('changed.bs.select', aplicarFiltros);

            // 4. Configurar exportación Excel
            $('#btnExportarExcel').on('click', function () {
                exportarExcel();
            });

            componentesInicializados = true;
        }

        function exportarExcel() {
            if (!tabla) {
                Swal.fire({
                    title: "Error",
                    text: "La tabla no está inicializada correctamente.",
                    icon: "error",
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
                return;
            }

            const filas = tabla.rows({ search: 'applied' }).nodes().toArray();
            const tieneEstadoAdmin = $('#tablaOficios thead th').length === 8;

            // Filtrar solo activos si existe columna de estado y es administrador
            let datosExportar = filas;
            if (tieneEstadoAdmin) {
                datosExportar = filas.filter(row => {
                    const estadoTexto = $(row.cells[6]).text().trim().toLowerCase();
                    return estadoTexto === "activo";
                });
            }

            if (datosExportar.length === 0) {
                Swal.fire({
                    title: "Exportación cancelada",
                    text: "No hay oficios para exportar con los filtros actuales.",
                    icon: "warning",
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
                return;
            }

            Swal.fire({
                title: "Confirmar exportación",
                text: `Se exportarán ${datosExportar.length} oficios. ¿Deseas continuar?`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, Exportar",
                cancelButtonText: "Cancelar",
                confirmButtonColor: "#0B5926",
                cancelButtonColor: "#6c757d"
            }).then((result) => {
                if (result.isConfirmed) {
                    const $btn = $('#btnExportarExcel');
                    $btn.prop('disabled', true);

                    try {
                        generarArchivoExcel(datosExportar, tieneEstadoAdmin);
                    } catch (error) {
                        console.error('Error al exportar Excel:', error);
                        Swal.fire({
                            title: "Error en exportación",
                            text: "Ocurrió un error al generar el archivo Excel.",
                            icon: "error",
                            confirmButtonText: "Entendido",
                            confirmButtonColor: "#3D6FAD"
                        });
                    } finally {
                        setTimeout(() => $btn.prop('disabled', false), 1000);
                    }
                }
            });
        }

        function generarArchivoExcel(datosExportar, tieneEstadoAdmin) {
            // Preparar datos para Excel
            const datos = [];

            // Encabezados
            const headers = ["Código", "Fecha", "Asunto", "Creado por", "Departamento destino", "Comunicación"];
            datos.push(headers);

            // Datos de las filas
            datosExportar.forEach(row => {
                const fila = [
                    $(row.cells[0]).text().trim(), // Código
                    $(row.cells[1]).text().trim(), // Fecha
                    $(row.cells[2]).text().trim(), // Asunto
                    $(row.cells[3]).text().trim(), // Creado por
                    $(row.cells[4]).text().trim(), // Departamento destino
                    $(row.cells[5]).text().trim()  // Comunicación
                ];
                datos.push(fila);
            });

            // Crear libro de Excel
            const libro = XLSX.utils.book_new();
            const hojaExcel = XLSX.utils.aoa_to_sheet(datos);

            // Ajustar anchos de columnas
            const anchosColumnas = [
                { wch: 15 }, // Código
                { wch: 12 }, // Fecha
                { wch: 30 }, // Asunto
                { wch: 25 }, // Creado por
                { wch: 25 }, // Departamento destino
                { wch: 15 }  // Comunicación
            ];

            hojaExcel['!cols'] = anchosColumnas;

            XLSX.utils.book_append_sheet(libro, hojaExcel, "Oficios");

            // Generar nombre de archivo con fecha
            const fechaActual = new Date();
            const fechaFormateada = fechaActual.toISOString().slice(0, 10).replace(/-/g, '');
            const nombreArchivo = `Oficios_${fechaFormateada}.xlsx`;

            // Descargar archivo
            XLSX.writeFile(libro, nombreArchivo);
        }

        function descargarPdfAutomatico() {
            const oficioCreadoId = '@TempData["OficioCreadoId"]';

            if (oficioCreadoId && oficioCreadoId !== '') {
                console.log('Descargando PDF automáticamente para oficio ID:', oficioCreadoId);

                // Esperar un momento para que la página termine de cargar
                setTimeout(() => {
                    // Crear URL para descargar el PDF
                    const urlDescarga = '@Url.Action("DescargarPdf", "Oficio")' + '?id=' + oficioCreadoId;

                    // Descargar el PDF en una nueva pestaña
                    window.open(urlDescarga, '_blank');

                    // Limpiar el TempData del lado del cliente
        @{
            TempData.Remove("OficioCreadoId");
        }
                }, 1000);
            }
        }

        function mostrarMensajesTempData() {
            const successMessage = '@Html.Raw(TempData["Success"]?.ToString())';
            const errorMessage = '@Html.Raw(TempData["Error"]?.ToString())';
            const primerAcceso = '@TempData["PrimerAcceso"]';

            if (successMessage) {
                Swal.fire({
                    title: "¡Módulo Oficios!",
                    text: successMessage,
                    icon: "success",
                    timer: 2000,
                    showConfirmButton: false,
                    timerProgressBar: true
                });
            }
            else if (errorMessage) {
                Swal.fire({
                    title: "¡Módulo Oficios!",
                    text: errorMessage,
                    icon: "error",
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
            } else if (primerAcceso === 'True') {
                Swal.fire({
                    title: 'Bienvenido al Sistema OfiGest',
                    text: 'OfiGest es la plataforma institucional para gestionar, auditar y controlar oficios administrativos con trazabilidad, eficiencia y seguridad.',
                    icon: 'warning',
                    confirmButtonText: 'Entendido',
                    confirmButtonColor: '#3D6FAD'
                });
            }
        }

        $(document).ready(function () {
            // Inicializar componentes inmediatamente
            inicializarComponentes();

            // Mostrar mensajes después de que la página esté completamente cargada
            setTimeout(() => {
                mostrarMensajesTempData();
            }, 100);

            // Ejecutar descarga automática de PDF si es necesario
            setTimeout(() => {
                descargarPdfAutomatico();
            }, 1500);
        });

        // Función para re-inicializar componentes si es necesario
        function reinicializarComponentes() {
            if (componentesInicializados) {
                $('.selectpicker').selectpicker('refresh');
                if (tabla && $.fn.DataTable.isDataTable('#tablaOficios')) {
                    tabla.draw();
                }
            }
        }
    </script>
}