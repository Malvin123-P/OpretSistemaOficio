@model IEnumerable<OfiGest.Models.OficioModel>

@{
    ViewData["Title"] = "Inicio";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var rolUsuario = Context.Session.GetString("RolUsuario");
}

<style>

    .bootstrap-select .dropdown-toggle {
        border: 1px solid #ced4da;
        border-radius: .25rem;
        background: white;
    }


    .bootstrap-select .dropdown-menu li.selected > a {
        background-color: #3D6FAD !important;
        color: white !important;
    }

    .fixed-header thead th {
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 2;
    }

    .btn-azul {
        background-color: #3D6FAD;
        color: white;
        width: 100%;
        padding: 0.75rem;
        font-weight: bold;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

        .btn-azul:hover {
            background-color: #2f5c91;
            color: white;
        }

    .card-adjusted {
        height: 700px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        margin-top: 1rem;
        margin-bottom: 2rem;
        padding: 2rem;
    }

    .btn-sm {
        background-color: #3D6FAD;
        color: white;
    }

        .btn-sm:hover {
            background-color: #2f5c91;
            color: white;
        }

    .filtro-select {
        min-width: 100%;
    }

    .btn-excel {
        background-color: #0B5926;
        color: white;
        font-weight: bold;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        transition: background-color 0.3s ease;
        border: none;
    }

        .btn-excel:hover {
            background-color: #09491F;
            color: white;
        }

    .estado-deshabilitado {
        color: #dc3545;
        font-weight: 600;
    }
    /* Estilos para el hover de las filas de la tabla */
    .table-scroll tbody tr {
        transition: background-color 0.2s ease;
        cursor: pointer;
    }

        .table-scroll tbody tr:hover {
            background-color: #f5f5f5 !important;
        }

        /* Para mantener la apariencia de filas deshabilitadas incluso en hover */
        .table-scroll tbody tr.table-danger:hover {
            background-color: #f8d7da !important;
        }

    /* Asegurar que el header fijo se mantenga por encima */
    .fixed-header thead th {
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 10; /* Aumentar z-index para mayor seguridad */
        box-shadow: 0 2px 2px -1px rgba(0,0,0,0.1);
    }
</style>

<div class="container-fluid d-flex flex-column compact-container">
    <h4 class="mt-3 mb-3">Listado de Oficios</h4>

    <div class="card shadow-sm border-0 p-4 card-adjusted">

        <div class="d-flex flex-wrap gap-3 align-items-end mb-3">
      
                <!-- Departamento destino -->
                <div class="flex-grow-1">
                    <label class="form-label">Departamento destino</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-building"></i></span>
                        <select id="filtroDepartamento" asp-items="ViewBag.Departamentos" class="form-control selectpicker" data-size="5" data-live-search="true" title="Filtro de búsqueda">
                            <option value="">Todos</option>
                        </select>
                    </div>
                </div>


            <div class="flex-grow-1">
                <label class="form-label">Usuario</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-person-fill"></i></span>
                    <select id="filtroUsuario" asp-items="ViewBag.UsuariosFiltro" class="form-control selectpicker" data-size="5" data-live-search="true" title="Filtro de búsqueda">
                        <option value="">Todos</option>
                    </select>
                </div>

            </div>

            <div class="flex-grow-1">
                <label class="form-label">Asunto</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-journal-text"></i></span>
                    <select id="filtroTipoOficio" asp-items="ViewBag.TiposOficio" class="form-control selectpicker" data-size="5" data-live-search="true" title="Filtro de búsqueda">
                        <option value="">Todos</option>
                    </select>
                </div>

            </div>

            @if (rolUsuario == "Administrador")
            {
                <div class="flex-grow-1">
                    <label class="form-label">Estado</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-toggle-on"></i></span>
                        <select id="filtroEstado" class="form-control selectpicker">
                            <option value="">Todos</option>
                            <option value="activo">Solo activos</option>
                            <option value="deshabilitado">Solo inactivos</option>
                        </select>
                    </div>

                </div>
            }

            <div>
                <label class="form-label d-block">&nbsp;</label>
                <button id="btnExportarExcel" class="btn-excel" title="Exportar Excel">Exportar</button>
            </div>
        </div>

        <div class="table-scroll mb-3">
            <table id="tablaOficios" class="table table-bordered table-striped align-middle mb-0 fixed-header">
                <thead>
                    <tr>
                        <th>Código</th>
                        <th>Fecha</th>
                        <th>Asunto</th>
                        <th>Creado por</th>
                        <th>Departamento destino</th>
                        @if (rolUsuario == "Administrador")
                        {
                            <th>Estado</th>
                        }
                        <th class="text-center">Acción</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var oficio in Model)
                    {
                        var claseFila = oficio.Estado ? "" : "table-danger";

                        <tr class="@claseFila">
                            <td>@oficio.Codigo</td>
                            <td>@oficio.FechaCreacion.ToString("dd/MM/yyyy")</td>
                            <td>@oficio.NombreTipoOficio</td>
                            <td>@oficio.NombreUsuario @oficio.ApellidoUsuario</td>
                            <td>@oficio.DirigidoDepartamento</td>
                            @if (rolUsuario == "Administrador")
                            {
                                <td>@(oficio.Estado ? "Activo" : "Deshabilitado")</td>
                            }
                            <td class="text-center d-flex justify-content-center gap-2">
                                <a asp-controller="Oficio" asp-action="Edit" asp-route-id="@oficio.Id" class="btn btn-sm btn-outline-dark" title="Editar oficio">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                @if (oficio.Estado)
                                {
                                    <a asp-controller="Oficio" asp-action="Details" asp-route-id="@oficio.Id" class="btn btn-sm btn-outline-dark" title="Descargar oficio">
                                        <i class="bi bi-file-earmark-arrow-down"></i>
                                    </a>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mt-auto">
            <a asp-controller="Oficio" asp-action="Create" class="btn btn-azul d-flex justify-content-center align-items-center gap-2 w-100">
                CREAR OFICIOS
            </a>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" />

    <script>
        // Variable global para controlar el estado de inicialización
        let componentesInicializados = false;
        let tabla; // Variable global para la DataTable

        function inicializarComponentes() {
            if (componentesInicializados) {
                return; // Ya están inicializados
            }

            // 1. Inicializar bootstrap-select PRIMERO
            $('.selectpicker').selectpicker();

            // 2. Inicializar DataTable
            tabla = $('#tablaOficios').DataTable({
                language: {
                    decimal: ",",
                    thousands: ".",
                    info: "Mostrando del _START_ al _END_ de _TOTAL_ registros",
                    infoEmpty: "Mostrando 0 registros",
                    infoFiltered: "(filtrado de _MAX_ registros totales)",
                    lengthMenu: "Mostrar _MENU_ registros",
                    loadingRecords: "Cargando...",
                    processing: "Procesando...",
                    search: "Buscar:",
                    zeroRecords: "No se encontraron resultados",
                    paginate: {
                        first: "Primero",
                        last: "Último",
                        next: "Siguiente",
                        previous: "Anterior"
                    }
                },
                pageLength: 8,
                order: [[0, 'desc']],
                dom: 'tip',
                autoWidth: false,
                responsive: true
            });

            // 3. Configurar filtros
            function aplicarFiltros() {
                const usuario = $('#filtroUsuario').val()?.trim() || '';
                const departamento = $('#filtroDepartamento').val()?.trim() || '';
                const asunto = $('#filtroTipoOficio').val()?.trim() || '';
                const estado = $('#filtroEstado').val()?.trim().toLowerCase();
                const tieneEstado = $('#tablaOficios thead th').length === 7;

                // Aplicar filtros a las columnas correspondientes
                tabla.columns(3).search(usuario); // Columna "Creado por"
                tabla.columns(4).search(departamento); // Columna "Departamento destino"
                tabla.columns(2).search(asunto); // Columna "Asunto"

                if (tieneEstado && estado) {
                    if (estado === "activo" || estado === "deshabilitado") {
                        tabla.columns(5).search(estado); // Columna "Estado"
                    } else {
                        tabla.columns(5).search(''); // Mostrar todos
                    }
                }

                tabla.draw();
            }

            // Event listeners para los filtros
            $('#filtroUsuario, #filtroDepartamento, #filtroEstado, #filtroTipoOficio')
                .on('changed.bs.select', aplicarFiltros);

            // 4. Configurar exportación Excel
            $('#btnExportarExcel').on('click', function () {
                exportarExcel();
            });

            componentesInicializados = true;
        }

        function exportarExcel() {
            if (!tabla) {
                Swal.fire({
                    title: "Error",
                    text: "La tabla no está inicializada correctamente.",
                    icon: "error",
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
                return;
            }

            const filas = tabla.rows({ search: 'applied' }).nodes().toArray();
            const tieneEstado = $('#tablaOficios thead th').length === 7;

            // Filtrar solo activos si existe columna de estado
            let activos = filas;
            if (tieneEstado) {
                activos = filas.filter(row => {
                    const estadoTexto = $(row.cells[5]).text().trim().toLowerCase();
                    return estadoTexto === "activo";
                });
            }

            if (activos.length === 0) {
                Swal.fire({
                    title: "Exportación cancelada",
                    text: "No hay oficios activos filtrados para exportar.",
                    icon: "warning",
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
                return;
            }

            Swal.fire({
                title: "Confirmar exportación",
                text: `Se exportarán ${activos.length} oficios activos. ¿Deseas continuar?`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, Exportar",
                cancelButtonText: "Cancelar",
                confirmButtonColor: "#0B5926",
                cancelButtonColor: "#6c757d"
            }).then((result) => {
                if (result.isConfirmed) {
                    const $btn = $('#btnExportarExcel');
                    $btn.prop('disabled', true);

                    try {
                        generarArchivoExcel(activos, tieneEstado);
                    } catch (error) {
                        console.error('Error al exportar Excel:', error);
                        Swal.fire({
                            title: "Error en exportación",
                            text: "Ocurrió un error al generar el archivo Excel.",
                            icon: "error",
                            confirmButtonText: "Entendido",
                            confirmButtonColor: "#3D6FAD"
                        });
                    } finally {
                        setTimeout(() => $btn.prop('disabled', false), 1000);
                    }
                }
            });
        }

        function generarArchivoExcel(activos, tieneEstado) {
            // Preparar datos para Excel
            const datos = [];

            // Encabezados
            const headers = ["Código", "Fecha", "Asunto", "Creado por", "Departamento destino"];
            if (tieneEstado) headers.push("Estado");
            datos.push(headers);

            // Datos de las filas
            activos.forEach(row => {
                const fila = [
                    $(row.cells[0]).text().trim(), // Código
                    $(row.cells[1]).text().trim(), // Fecha
                    $(row.cells[2]).text().trim(), // Asunto
                    $(row.cells[3]).text().trim(), // Creado por
                    $(row.cells[4]).text().trim()  // Departamento destino
                ];
                if (tieneEstado) {
                    fila.push($(row.cells[5]).text().trim()); // Estado
                }
                datos.push(fila);
            });

            // Crear libro de Excel
            const libro = XLSX.utils.book_new();
            const hojaExcel = XLSX.utils.aoa_to_sheet(datos);

            // Ajustar anchos de columnas
            const anchosColumnas = [
                { wch: 15 }, // Código
                { wch: 12 }, // Fecha
                { wch: 30 }, // Asunto
                { wch: 25 }, // Creado por
                { wch: 25 }  // Departamento destino
            ];
            if (tieneEstado) anchosColumnas.push({ wch: 12 }); // Estado

            hojaExcel['!cols'] = anchosColumnas;

            XLSX.utils.book_append_sheet(libro, hojaExcel, "OficiosActivos");

            // Generar nombre de archivo con fecha
            const fechaActual = new Date();
            const fechaFormateada = fechaActual.toISOString().slice(0, 10).replace(/-/g, '');
            const nombreArchivo = `OficiosActivos_${fechaFormateada}.xlsx`;

            // Descargar archivo
            XLSX.writeFile(libro, nombreArchivo);
        }

        // NUEVA FUNCIÓN: Descargar PDF automáticamente después de crear oficio
        function descargarPdfAutomatico() {
            const oficioCreadoId = '@TempData["OficioCreadoId"]';

            if (oficioCreadoId && oficioCreadoId !== '') {
                console.log('Descargando PDF automáticamente para oficio ID:', oficioCreadoId);

                // Esperar un momento para que la página termine de cargar
                setTimeout(() => {
                    // Crear URL para descargar el PDF
                    const urlDescarga = '@Url.Action("DescargarPdf", "Oficio")' + '?id=' + oficioCreadoId;

                    // Descargar el PDF en una nueva pestaña
                    window.open(urlDescarga, '_blank');

               
                    // Limpiar el TempData del lado del cliente
                    // Esto evita que se descargue múltiples veces al recargar la página
        @{
            TempData.Remove("OficioCreadoId");
        }

                }, 1000);
            }
        }

        function mostrarMensajesTempData() {
            const successMessage = '@Html.Raw(TempData["Success"]?.ToString())';
            const errorMessage = '@Html.Raw(TempData["Error"]?.ToString())';
            const primerAcceso = '@TempData["PrimerAcceso"]';

            if (successMessage) {
                Swal.fire({
                    title: "¡Módulo Oficios!",
                    text: successMessage,
                    icon: "success",
                    timer: 2000,
                    showConfirmButton: false,
                    timerProgressBar: true
                });
            }
            else if (errorMessage) {
                Swal.fire({
                    title: "¡Módulo Oficios!",
                    text: errorMessage,
                    icon: "error",
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
            } else if (primerAcceso === 'True') {
                Swal.fire({
                    title: 'Bienvenido al Sistema OfiGest',
                    text: 'OfiGest es la plataforma institucional para gestionar, auditar y controlar oficios administrativos con trazabilidad, eficiencia y seguridad.',
                    icon: 'warning',
                    confirmButtonText: 'Entendido',
                    confirmButtonColor: '#3D6FAD'
                });
            }
        }

        $(document).ready(function () {
            // Inicializar componentes inmediatamente
            inicializarComponentes();

            // Mostrar mensajes después de que la página esté completamente cargada
            setTimeout(() => {
                mostrarMensajesTempData();
            }, 100);

            // NUEVO: Ejecutar descarga automática de PDF si es necesario
            setTimeout(() => {
                descargarPdfAutomatico();
            }, 1500);
        });

        // Función para re-inicializar componentes si es necesario
        function reinicializarComponentes() {
            if (componentesInicializados) {
                // Solo refrescar si es necesario
                $('.selectpicker').selectpicker('refresh');

                if (tabla && $.fn.DataTable.isDataTable('#tablaOficios')) {
                    tabla.draw();
                }
            }
        }

        // Prevenir interferencia con notificaciones
        // Esta función evita que las notificaciones afecten los selectpicker
        function protegerSelectores() {
            // Asegurar que los selectpicker mantengan su estado
            $(document).on('DOMNodeInserted', function(e) {
                // Si se detecta actividad de notificaciones, proteger los selects
                if ($(e.target).hasClass('notificacion-item-usuario') ||
                    $(e.target).closest('.dropdown-notificaciones-usuario').length) {
                    // No hacer nada - dejar que los selectpicker permanezcan intactos
                }
            });
        }

        // Ejecutar protección al cargar
        $(function() {
            protegerSelectores();
        });
    </script>
}