@model RestablecerClaveViewModel
@{
    Layout = null;
    ViewData["Title"] = "Definir contraseña";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Cache-Control" content="no-store" />
    <title>@ViewData["Title"] - OfiGest</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css" />
    <link rel="icon" type="image/x-icon" href="/images/logoOPRETFooter.png">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@700&display=swap" rel="stylesheet">

    <style>
        :root {
            --color-primary: #3D6FAD;
            --color-primary-dark: #2f5c91;
            --color-success: #0B5926;
            --color-danger: #dc3545;
            --transition-speed: 0.3s;
        }

        body {
            background-color: white;
            font-family: 'Segoe UI', sans-serif;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .main-container {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1rem;
        }

        .card-login {
            width: 100%;
            max-width: 500px;
            margin: auto;
            border: 1px solid #ccc;
            border-radius: 12px;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

            .card-login:hover {
                transform: translateY(-5px);
            }

        .card-body {
            padding: 2rem;
        }

        .form-group {
            position: relative;
            margin-bottom: 5px;
        }

            .form-group i {
                position: absolute;
                top: 12px;
                left: 12px;
                font-size: 18px;
                color: #333;
            }

        .form-control {
            padding-left: 40px;
            height: 45px;
            font-size: 16px;
            border-radius: 6px;
        }

        .btn-login {
            background-color: var(--color-primary);
            color: white;
            width: 100%;
            padding: 0.8rem;
            font-weight: bold;
            border-radius: 8px;
            transition: background-color var(--transition-speed);
            border: none;
            position: relative;
            overflow: hidden;
        }

            .btn-login:hover {
                background-color: var(--color-primary-dark);
                color: white;
            }

            .btn-login:disabled {
                background-color: #6c757d;
                cursor: not-allowed;
            }

        .progress-container {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: transparent;
            border-radius: 0 0 8px 8px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            width: 0%;
            border-radius: 0 0 8px 8px;
            transition: width 0.4s ease;
        }

        .btn-content {
            position: relative;
            z-index: 2;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
        }

        .text-danger {
            font-size: 13px;
            text-align: left;
            display: block;
            margin-left: 5px;
            margin-top: 2px;
            color: var(--color-danger);
        }

        .titulo-app {
            font-size: 2rem;
            color: #2f5c91;
            letter-spacing: 1px;
            text-transform: uppercase;
            font-family: 'Orbitron', sans-serif;
            font-weight: 600;
        }

        .subtitulo-app {
            font-weight: 400;
            font-size: 1.1rem;
            color: #555;
        }

        .footer-bar {
            height: 100px;
            background-color: var(--color-primary-dark);
            margin-top: auto;
        }

        .fade-out {
            opacity: 0;
            transition: opacity 0.5s ease;
            pointer-events: none;
        }

        .custom-progress {
            background-color: #3D6FAD;
        }

        .link-recuperar {
            display: block;
            margin-top: 10px;
            color: black;
            text-decoration: none;
            font-size: 16px;
        }

            .link-recuperar:hover {
                text-decoration: underline;
            }

    </style>
</head>

<body>
    <div class="main-container">
        <div class="card card-login">
            <div class="card-body text-center">
                <form id="resetForm" asp-action="Restablecer" method="post" class="d-grid gap-2" autocomplete="off">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="Correo" />
                    <input type="hidden" asp-for="Token" />

                    <h1 class="titulo-app mb-0">OfiGest</h1>
                    <h5 class="subtitulo-app text-muted">Definición de contraseña institucional</h5>

                    @if (TempData["RestablecimientoExitoso"] != null)
                    {
                        <div id="mensajeExito" class="alert alert-success text-center mt-3" role="alert">
                            <i class="bi bi-check-circle-fill me-2"></i> @TempData["RestablecimientoExitoso"]
                        </div>
                    }
                    @if (TempData["Error"] != null)
                    {
                        <div id="mensajeError" class="alert alert-danger text-center mt-3" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i> @TempData["Error"]
                        </div>
                    }

                  
                    <div class="form-group mt-3">
                        <i class="bi bi-lock-fill"></i>
                        <input asp-for="NuevaContraseña" class="form-control" type="password" placeholder="Nueva contraseña" />
                        <span asp-validation-for="NuevaContraseña" class="text-danger"></span>
                    </div>

                    <div class="form-group mt-3">
                        <i class="bi bi-lock-fill"></i>
                        <input asp-for="ConfirmarContraseña" class="form-control" type="password" placeholder="Confirmar contraseña" />
                        <span asp-validation-for="ConfirmarContraseña" class="text-danger"></span>
                    </div>

                    <button type="submit" id="btnReset" class="btn btn-login d-flex justify-content-center align-items-center gap-2 mt-3">
                        <div class="btn-content">
                            <span id="btnText">Guardar contraseña</span>
                        </div>
                        <div class="progress-container">
                            <div class="progress-bar custom-progress" id="resetProgress"></div>
                        </div>
                    </button>

                    <a asp-action="Index" asp-controller="Login" class="link-recuperar mt-2">Volver al inicio de sesión</a>
                </form>
            </div>
        </div>
    </div>

    <div class="footer-bar"></div>

    <!-- Scripts directamente en el body -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const nuevaContraseñaInput = document.querySelector('[name="NuevaContraseña"]');
            const confirmarContraseñaInput = document.querySelector('[name="ConfirmarContraseña"]');
            const resetForm = document.getElementById('resetForm');
            const btnReset = document.getElementById('btnReset');
            const btnText = document.getElementById('btnText');
            const resetProgress = document.getElementById('resetProgress');

            let enviandoFormulario = false;

            // Función para eliminar espacios al principio
            function limpiarEspaciosInicio(texto) {
                if (typeof texto !== 'string') return '';
                return texto.replace(/^\s+/, '');
            }

            function configurarValidacionEspacios() {
                // Prevenir espacios al principio mientras se escribe
                const inputs = [nuevaContraseñaInput, confirmarContraseñaInput];

                inputs.forEach(input => {
                    if (!input) return;

                    input.addEventListener('keydown', function (e) {
                        if (e.keyCode === 32 || e.key === ' ') {
                            const cursorPos = this.selectionStart;
                            const cursorAlInicio = cursorPos === 0;
                            const textoVacio = this.value === '';

                            if (cursorAlInicio || textoVacio) {
                                e.preventDefault();
                                return false;
                            }
                        }
                    });

                    input.addEventListener('paste', function (e) {
                        const clipboardData = e.clipboardData || window.clipboardData;
                        const pastedText = clipboardData.getData('text');

                        if (pastedText && pastedText.match(/^\s/)) {
                            e.preventDefault();
                            const textoLimpio = limpiarEspaciosInicio(pastedText);
                            const startPos = this.selectionStart;
                            const endPos = this.selectionEnd;

                            this.value = this.value.substring(0, startPos) + textoLimpio + this.value.substring(endPos);
                            this.selectionStart = this.selectionEnd = startPos + textoLimpio.length;
                        }
                    });

                    input.addEventListener('blur', function () {
                        const valorOriginal = this.value;
                        const valorLimpio = limpiarEspaciosInicio(valorOriginal);

                        if (valorOriginal !== valorLimpio) {
                            this.value = valorLimpio;
                        }
                    });
                });
            }

            // Aplicar validación de espacios
            configurarValidacionEspacios();

            // Función para simular el progreso
            function simularProgreso() {
                let progress = 0;
                const interval = setInterval(() => {
                    progress += 5;
                    resetProgress.style.width = progress + '%';

                    if (progress >= 100) {
                        clearInterval(interval);
                    }
                }, 150);
            }

            // Validación del formulario antes de enviar
            if (resetForm) {
                resetForm.addEventListener('submit', function (e) {
                    if (enviandoFormulario) {
                        e.preventDefault();
                        return;
                    }

                    // Limpiar espacios al principio antes de enviar
                    if (nuevaContraseñaInput) {
                        nuevaContraseñaInput.value = limpiarEspaciosInicio(nuevaContraseñaInput.value);
                    }
                    if (confirmarContraseñaInput) {
                        confirmarContraseñaInput.value = limpiarEspaciosInicio(confirmarContraseñaInput.value);
                    }

                    // Validar campos obligatorios
                    if (!nuevaContraseñaInput.value.trim() || !confirmarContraseñaInput.value.trim()) {
                        e.preventDefault();
                        return;
                    }

                    // Deshabilitar botón y mostrar estado de carga
                    enviandoFormulario = true;
                    btnReset.disabled = true;
                    btnText.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';

                    // Simular progreso
                    simularProgreso();

                    // Timeout de seguridad para evitar botón bloqueado
                    setTimeout(() => {
                        if (btnReset.disabled) {
                            btnReset.disabled = false;
                            btnText.textContent = 'Guardar contraseña';
                            enviandoFormulario = false;
                            resetProgress.style.width = '0%';

                            // Mostrar alerta de timeout
                            if (typeof Swal !== 'undefined') {
                                Swal.fire({
                                    title: "Tiempo de espera agotado",
                                    text: "La operación está tomando más tiempo de lo esperado. Por favor, intente nuevamente.",
                                    icon: "warning",
                                    confirmButtonText: "Entendido",
                                    confirmButtonColor: "#3D6FAD"
                                });
                            }
                        }
                    }, 10000);
                });
            }

            // Cierre animado de mensajes
            const mensajeExito = document.getElementById("mensajeExito");
            const mensajeError = document.getElementById("mensajeError");
            const validationSummary = document.querySelector(".validation-summary-errors");

            if (mensajeExito) {
                setTimeout(() => {
                    mensajeExito.classList.add("fade-out");
                    setTimeout(() => {
                        if (mensajeExito.parentNode) {
                            mensajeExito.remove();
                        }
                    }, 500);
                }, 5000);
            }

            if (mensajeError) {
                setTimeout(() => {
                    mensajeError.classList.add("fade-out");
                    setTimeout(() => {
                        if (mensajeError.parentNode) {
                            mensajeError.remove();
                        }
                    }, 500);
                }, 5000);
            }

            if (validationSummary) {
                setTimeout(() => {
                    validationSummary.classList.add("fade-out");
                    setTimeout(() => {
                        if (validationSummary.parentNode) {
                            validationSummary.remove();
                        }
                    }, 500);
                }, 5000);
            }

            // Rehabilitar botón si la página se recarga
            window.addEventListener('beforeunload', function() {
                btnReset.disabled = false;
                btnText.textContent = 'Guardar contraseña';
                enviandoFormulario = false;
                resetProgress.style.width = '0%';
            });
        });
    </script>
</body>
</html>