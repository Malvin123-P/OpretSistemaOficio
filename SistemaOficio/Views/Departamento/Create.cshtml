@model OfiGest.Models.DepartamentoModel
@{
    ViewData["Title"] = "Crear Departamento";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .form-card {
        max-width: 900px;
        margin: 0 auto;
        margin-top: 1rem;
    }

    .btn-azul {
        background-color: #3D6FAD;
        color: white;
        width: 100%;
        padding: 0.75rem;
        font-weight: bold;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

        .btn-azul:hover {
            background-color: #2f5c91;
            color: white;
        }

    .form-label span {
        font-weight: normal;
    }

    textarea {
        resize: none;
        height: 400px;
    }

    .card-adjusted {
        height: 700px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        margin-top: 1rem;
        margin-bottom: 2rem;
        padding: 2rem;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 0.5rem;
    }
</style>

<form asp-action="Create" method="post" autocomplete="off" id="createForm">
    <div class="container-fluid d-flex flex-column compact-container">

        @Html.AntiForgeryToken()
        <h4 class="mt-3 mb-3">Crear Departamento</h4>
        <div class="card shadow-sm border-0 p-4 card-adjusted">

            <div class="row">
                <!-- Nombre -->
                <div class="col-md-6 mb-3">
                    <label asp-for="Nombre" class="form-label">@Html.DisplayNameFor(m => m.Nombre)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-building"></i></span>
                        <input asp-for="Nombre" class="form-control" maxlength="100" placeholder="Ej: Recursos Humanos" />
                    </div>
                    <span asp-validation-for="Nombre" class="text-danger d-none"></span>
                </div>

                <!-- Iniciales -->
                <div class="col-md-6 mb-3">
                    <label asp-for="Iniciales" class="form-label">@Html.DisplayNameFor(m => m.Iniciales)<small class="text-muted">(Puede editarse)</small></label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-code-slash"></i></span>
                        <input asp-for="Iniciales" class="form-control" id="codigoCorto" maxlength="20" placeholder="Ej: RH, se sugiere automáticamente" />
                    </div>
                    <span asp-validation-for="Iniciales" class="text-danger d-none"></span>
                </div>
            </div>

            <!-- Descripción -->
            <div class="mb-3">
                <label asp-for="Descripcion" class="form-label">@Html.DisplayNameFor(m => m.Descripcion)<span class="text-muted">(Opcional)</span></label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-card-text"></i></span>
                    <textarea asp-for="Descripcion" maxlength="500" class="form-control" placeholder="Ej: Departamento encargado de gestionar procesos humanos, nómina y bienestar institucional..."></textarea>
                </div>
                <span asp-validation-for="Descripcion" class="text-danger d-none"></span>
                <div id="contadorDescripcion" class="mt-2 text-muted text-end"></div>
            </div>

            <!-- Botón de envío -->
            <div class="mt-auto">
                <button type="submit" id="submitBtn" class="btn btn-azul d-flex justify-content-center align-items-center gap-2 w-100">
                    CREAR DEPARTAMENTO
                </button>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        $(document).ready(function () {
            $('form').attr('novalidate', 'novalidate');

            const ValidacionMessage = '@Html.Raw(TempData["Validacion"]?.ToString())';

            if (ValidacionMessage) {
                Swal.fire({
                    icon: "error",
                    title: "¡Atención!",
                    text: ValidacionMessage,
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
            }

            const nombreInput = $('[name="Nombre"]');
            const inicialesInput = $('[name="Iniciales"]');
            const descripcionInput = $('[name="Descripcion"]');
            const contador = $('#contadorDescripcion');
            const submitBtn = $('#submitBtn');
            const createForm = $('#createForm');

            // Función para eliminar solo espacios al principio
            function limpiarEspaciosInicio(texto) {
                if (typeof texto !== 'string') return '';
                return texto.replace(/^\s+/, '');
            }

            // Función para obtener prefijo de iniciales
            function obtenerPrefijo(nombre) {
                const palabras = nombre.trim().split(/\s+/).filter(p => p.length > 0);
                return palabras.map(p => p.charAt(0).toUpperCase()).join("");
            }

            function configurarValidacionEspacios() {
                // Prevenir espacios al principio mientras se escribe
                $('input, textarea').on('keydown', function (e) {
                    if (e.keyCode === 32 || e.key === ' ') {
                        const cursorPos = this.selectionStart;
                        const cursorAlInicio = cursorPos === 0;
                        const textoVacio = this.value === '';

                        if (cursorAlInicio || textoVacio) {
                            e.preventDefault();
                            return false;
                        }
                    }
                });

                // Prevenir pegado de contenido con espacios al principio
                $('input, textarea').on('paste', function (e) {
                    const clipboardData = e.originalEvent.clipboardData || window.clipboardData;
                    const pastedText = clipboardData.getData('text');

                    if (pastedText && pastedText.match(/^\s/)) {
                        e.preventDefault();
                        const textoLimpio = limpiarEspaciosInicio(pastedText);
                        const startPos = this.selectionStart;
                        const endPos = this.selectionEnd;

                        this.value = this.value.substring(0, startPos) + textoLimpio + this.value.substring(endPos);
                        this.selectionStart = this.selectionEnd = startPos + textoLimpio.length;
                    }
                });

                // Limpiar espacios al principio en blur
                $('input, textarea').on('blur', function () {
                    const valorOriginal = $(this).val();
                    const valorLimpio = limpiarEspaciosInicio(valorOriginal);

                    if (valorOriginal !== valorLimpio) {
                        $(this).val(valorLimpio);
                    }
                });
            }

            // Aplicar validación de espacios
            configurarValidacionEspacios();

            // Generar iniciales automáticamente
            nombreInput.on("input", function () {
                let valor = $(this).val().trim();

                if (!valor) {
                    inicialesInput.val("");
                    return;
                }

                const generadas = obtenerPrefijo(valor);
                const manual = inicialesInput.val().trim();

                // Solo actualizar si las iniciales están vacías o son iguales a las generadas anteriormente
                if (!manual || manual === obtenerPrefijo(nombreInput.data('valor-anterior') || '')) {
                    inicialesInput.val(generadas);
                }

                // Guardar valor actual para comparación futura
                nombreInput.data('valor-anterior', valor);
            });

            // Convertir iniciales a mayúsculas y eliminar espacios
            inicialesInput.on("input", function () {
                let valor = $(this).val();
                // Eliminar espacios y convertir a mayúsculas
                let valorLimpio = valor.replace(/\s/g, '').toUpperCase();

                if (valor !== valorLimpio) {
                    $(this).val(valorLimpio);
                }
            });

            // Inicializar el campo de iniciales
            function inicializarIniciales() {
                const nombreValor = nombreInput.val().trim();
                const inicialesValor = inicialesInput.val().trim();

                if ((!inicialesValor || inicialesValor === obtenerPrefijo(nombreInput.data('valor-anterior') || '')) && nombreValor) {
                    const prefijo = obtenerPrefijo(nombreValor);
                    inicialesInput.val(prefijo);
                }

                nombreInput.data('valor-anterior', nombreValor);
            }

            inicializarIniciales();

            // Contador de caracteres para descripción
                if (descripcionInput.length && contador.length) {
                    const maxLength = 500;
                    const umbral = 450;
                    let alertaMostrada = false;

                    function actualizarContador() {
                        const actual = descripcionInput.val().length;
                        contador.text(`${actual}/${maxLength} caracteres`);
                        contador.removeClass("text-warning text-danger");

                        if (actual >= maxLength) {
                            contador.addClass("text-danger");
                            if (!alertaMostrada) {
                                Swal.fire({
                                    title: "Límite alcanzado",
                                    text: "Has llegado al máximo de 500 caracteres permitidos.",
                                    icon: "warning",
                                    confirmButtonText: "Entendido",
                                    confirmButtonColor: "#3D6FAD"
                                });
                                alertaMostrada = true;
                            }
                        } else if (actual >= umbral) {
                            contador.addClass("text-warning");
                            alertaMostrada = false;
                        } else {
                            alertaMostrada = false;
                        }
                    }

                    // Capturar tanto input como paste
                    descripcionInput.on("input", actualizarContador);
                    descripcionInput.on("paste", function(e) {
                        // Pequeño delay para que se actualice el valor después del pegado
                        setTimeout(actualizarContador, 10);
                    });

                    // También capturar el evento cut (cortar) para casos donde se corta texto
                    descripcionInput.on("cut", actualizarContador);

                    actualizarContador(); // Inicializar contador
                }

            createForm.on('submit', function (e) {
                e.preventDefault();

                // Limpiar espacios al principio antes de enviar
                $('input, textarea').each(function() {
                    const valorOriginal = $(this).val();
                    const valorLimpio = limpiarEspaciosInicio(valorOriginal);
                    if (valorOriginal !== valorLimpio) {
                        $(this).val(valorLimpio);
                    }
                });

                const nombreActual = nombreInput.val().trim();
                const inicialesActuales = inicialesInput.val().trim();

                // Validación final
                if (!nombreActual || !inicialesActuales) {
                    Swal.fire({
                        title: '<span>Campos requeridos (<span style="color:#dc3545">*</span>)</span>',
                        text: "Por favor complete todos los campos obligatorios.",
                        icon: "warning",
                        confirmButtonText: "Entendido",
                        confirmButtonColor: "#3D6FAD"
                    });
                    return false;
                }

                // Deshabilitar botón y mostrar loading
                submitBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creando...');

                // Timeout de seguridad para evitar botón bloqueado
                setTimeout(() => {
                    if (submitBtn.prop('disabled')) {
                        submitBtn.prop('disabled', false).html('CREAR DEPARTAMENTO');
                        Swal.fire({
                            title: "Tiempo de espera agotado",
                            text: "La operación está tomando más tiempo de lo esperado. Por favor, intente nuevamente.",
                            icon: "warning",
                            confirmButtonText: "Entendido",
                            confirmButtonColor: "#3D6FAD"
                        });
                    }
                }, 10000);

                // Enviar formulario
                this.submit();
            });

            // Rehabilitar botón si hay error de validación del servidor
            if ('@ViewContext.ViewData.ModelState.IsValid' === 'False') {
                submitBtn.prop('disabled', false).html('CREAR DEPARTAMENTO');
            }

        });
    </script>
}