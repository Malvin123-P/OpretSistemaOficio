@model OfiGest.Models.LoginModel
@{
    Layout = null;
    ViewData["Title"] = "Iniciar sesión";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Cache-Control" content="no-store" />

    <title>Iniciar sesión - OfiGest</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css" />
    <link rel="icon" type="image/x-icon" href="/images/logoOPRETFooter.png">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@700&display=swap" rel="stylesheet">

    <style>
        :root {
            --color-primary: #3D6FAD;
            --color-primary-dark: #2f5c91;
            --color-success: #0B5926;
            --color-danger: #dc3545;
            --color-warning: #ffc107;
            --transition-speed: 0.3s;
        }

        body {
            background-color: white;
            font-family: 'Segoe UI', sans-serif;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .main-container {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1rem;
        }

        .card-login {
            width: 100%;
            max-width: 500px;
            margin: auto;
            border: 1px solid #ccc;
            border-radius: 12px;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

            .card-login:hover {
                transform: translateY(-5px);
            }

        .card-body {
            padding: 2rem;
        }

        .form-group {
            position: relative;
            margin-bottom: 5px;
        }

            .form-group i {
                position: absolute;
                top: 12px;
                left: 12px;
                font-size: 18px;
                color: #333;
            }

        .form-control {
            padding-left: 40px;
            height: 45px;
            font-size: 16px;
            border-radius: 6px;
        }

        .btn-login {
            background-color: var(--color-primary);
            color: white;
            width: 100%;
            padding: 0.8rem;
            font-weight: bold;
            border-radius: 8px;
            transition: background-color var(--transition-speed);
            border: none;
            position: relative;
            overflow: hidden;
        }

            .btn-login:hover {
                background-color: var(--color-primary-dark);
                color: white;
            }

            .btn-login:disabled {
                background-color: #6c757d;
                cursor: not-allowed;
            }

        .progress-container {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: transparent;
            border-radius: 0 0 8px 8px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            width: 0%;
            border-radius: 0 0 8px 8px;
            transition: width 0.4s ease;
        }

        .btn-content {
            position: relative;
            z-index: 2;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
        }

        .text-danger {
            font-size: 13px;
            text-align: left;
            display: block;
            margin-left: 5px;
            margin-top: 2px;
            color: var(--color-danger);
        }

        .titulo-app {
            font-size: 2rem;
            color: #2f5c91;
            letter-spacing: 1px;
            text-transform: uppercase;
            font-family: 'Orbitron', sans-serif;
            font-weight: 600;
        }

        .subtitulo-app {
            font-weight: 400;
            font-size: 1.1rem;
            color: #555;
        }

        .footer-bar {
            height: 100px;
            background-color: var(--color-primary-dark);
            margin-top: auto;
        }

        .fade-out {
            opacity: 0;
            transition: opacity 0.5s ease;
            pointer-events: none;
        }

        .custom-progress {
            background-color: #3D6FAD;
        }

        .link-recuperar {
            display: block;
            margin-top: 10px;
            color: black;
            text-decoration: none;
            font-size: 16px;
        }

            .link-recuperar:hover {
                text-decoration: underline;
            }

        .form-check-input:checked {
            background-color: var(--color-success);
            border-color: var(--color-success);
        }

        .form-check-input:focus {
            box-shadow: 0 0 0 0.25rem rgba(11, 89, 38, 0.25);
        }

        .shake-animation {
            animation: shake 0.5s ease-in-out;
        }

        @@keyframes shake {
            0%, 100%

        {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        75% {
            transform: translateX(5px);
        }

        }
    </style>
</head>
<body>
    <div class="main-container">
        <div class="card card-login">
            <div class="card-body text-center">
                <form id="loginForm" asp-action="Index" asp-controller="Login" method="post" class="d-grid gap-2" autocomplete="on">
                    @Html.AntiForgeryToken()

                    <h1 class="titulo-app mb-0">OfiGest</h1>
                    <h5 class="subtitulo-app text-muted">Gestión de Oficios Institucionales</h5>

                    <!-- ⭐⭐ Mensaje de sesión expirada por timeout -->
                    @if (ViewBag.MensajeTimeout != null)
                    {
                        <div id="mensajeTimeout" class="alert alert-warning alert-timeout text-center mt-3 shake-animation" role="alert">
                            <i class="bi bi-clock-history me-2"></i> @ViewBag.MensajeTimeout
                        </div>
                    }

                    <!-- Mensaje de éxito -->
                    @if (TempData["RestablecimientoExitoso"] != null)
                    {
                        <div id="mensajeExito" class="alert alert-success text-center mt-3" role="alert">
                            <i class="bi bi-check-circle-fill me-2"></i> @TempData["RestablecimientoExitoso"]
                        </div>
                    }

                    <!-- Mensaje de error de credenciales -->
                    @if (ViewData.ModelState["Contraseña"]?.Errors?.Count > 0)
                    {
                        <div id="mensajeError" class="alert alert-danger text-center mt-3" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i> @ViewData.ModelState["Contraseña"].Errors.First().ErrorMessage
                        </div>
                    }

                    <div class="form-group mt-3">
                        <i class="bi bi-envelope"></i>
                        <input asp-for="Correo" class="form-control" id="Correo" name="Correo" placeholder="Correo Institucional" autocomplete="username" />
                        <span asp-validation-for="Correo" class="text-danger"></span>
                    </div>

                    <div class="form-group mt-3">
                        <i class="bi bi-lock"></i>
                        <input asp-for="Contraseña" class="form-control" id="Contraseña" placeholder="***********" type="password" autocomplete="current-password" />
                        <span asp-validation-for="Contraseña" class="text-danger"></span>
                    </div>

                    <div class="form-check form-switch text-start mb-0">
                        <input asp-for="Recuerdame" class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" />
                        <label class="form-check-label" for="flexSwitchCheckDefault">Recuérdame</label>
                    </div>

                    <button type="submit" id="btnLogin" class="btn btn-login d-flex justify-content-center align-items-center gap-2">
                        <div class="btn-content">
                            <span id="btnText">Iniciar sesión</span>
                        </div>
                        <div class="progress-container">
                            <div class="progress-bar custom-progress" id="loginProgress"></div>
                        </div>
                    </button>

                    <a asp-controller="Cuenta" asp-action="SolicitarRestablecimiento" class="link-recuperar">¿Olvidaste tu contraseña?</a>
                </form>
            </div>
        </div>
    </div>

    <div class="footer-bar"></div>

    <!-- Scripts de validación -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const correoInput = document.getElementById('Correo');
            const contraseñaInput = document.getElementById('Contraseña');
            const recuerdameSwitch = document.getElementById('flexSwitchCheckDefault');
            const loginForm = document.getElementById('loginForm');
            const btnLogin = document.getElementById('btnLogin');
            const btnText = document.getElementById('btnText');
            const loginProgress = document.getElementById('loginProgress');
            const storageKey = 'correoGuardado';

            let enviandoFormulario = false;

            // ⭐⭐ Auto-focus en el campo de correo si hay mensaje de timeout
            if (document.getElementById('mensajeTimeout') && correoInput) {
                setTimeout(() => {
                    correoInput.focus();
                }, 300);
            }

            // Función para eliminar espacios extras
            function limpiarEspacios(texto) {
                return texto.replace(/\s+/g, '').trim(); // Elimina todos los espacios
            }

            // Cargar estado de "Recuérdame" al cargar la página
            function cargarEstadoRecuerdame() {
                const correoGuardado = localStorage.getItem(storageKey);
                if (correoGuardado && correoInput) {
                    correoInput.value = correoGuardado;
                    recuerdameSwitch.checked = true;
                }
            }

            // Limpiar espacios en el input de Correo
            if (correoInput) {
                correoInput.addEventListener('input', function () {
                    let valor = this.value;
                    let valorLimpio = limpiarEspacios(valor);

                    if (valor !== valorLimpio) {
                        this.value = valorLimpio;
                    }

                    // Guardar en localStorage si el switch está activado
                    if (recuerdameSwitch.checked) {
                        localStorage.setItem(storageKey, valorLimpio);
                    }
                });

                correoInput.addEventListener('blur', function () {
                    this.value = limpiarEspacios(this.value);
                    // Actualizar localStorage después de limpiar
                    if (recuerdameSwitch.checked && this.value) {
                        localStorage.setItem(storageKey, this.value);
                    }
                });
            }

            // Limpiar espacios en el input de Contraseña
            if (contraseñaInput) {
                contraseñaInput.addEventListener('input', function () {
                    let valor = this.value;
                    let valorLimpio = limpiarEspacios(valor);

                    if (valor !== valorLimpio) {
                        this.value = valorLimpio;
                    }
                });

                contraseñaInput.addEventListener('blur', function () {
                    this.value = limpiarEspacios(this.value);
                });
            }

            // Cargar estado al iniciar
            cargarEstadoRecuerdame();

            // Manejar cambios en el switch "Recuérdame"
            if (recuerdameSwitch) {
                recuerdameSwitch.addEventListener('change', function () {
                    if (recuerdameSwitch.checked && correoInput.value) {
                        localStorage.setItem(storageKey, limpiarEspacios(correoInput.value));
                    } else {
                        localStorage.removeItem(storageKey);
                    }
                });
            }

            // Función para simular el progreso de inicio de sesión
            function simularProgreso() {
                let progress = 0;
                const interval = setInterval(() => {
                    progress += 5;
                    loginProgress.style.width = progress + '%';

                    if (progress >= 100) {
                        clearInterval(interval);
                    }
                }, 150);
            }

            // Validación del formulario antes de enviar
            if (loginForm) {
                loginForm.addEventListener('submit', function (e) {
                    if (enviandoFormulario) {
                        e.preventDefault();
                        return;
                    }

                    // Limpiar espacios finales antes de enviar
                    if (correoInput) {
                        correoInput.value = limpiarEspacios(correoInput.value);
                    }
                    if (contraseñaInput) {
                        contraseñaInput.value = limpiarEspacios(contraseñaInput.value);
                    }

                    // Validar campos obligatorios
                    if (!correoInput.value.trim() || !contraseñaInput.value.trim()) {
                        e.preventDefault();
                        return;
                    }

                    // Deshabilitar botón y mostrar estado de carga
                    enviandoFormulario = true;
                    btnLogin.disabled = true;
                    btnText.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Iniciando sesión...';

                    // Simular progreso de inicio de sesión
                    simularProgreso();

                    // Timeout de seguridad para evitar botón bloqueado
                    setTimeout(() => {
                        if (btnLogin.disabled) {
                            btnLogin.disabled = false;
                            btnText.textContent = 'Iniciar sesión';
                            enviandoFormulario = false;
                            loginProgress.style.width = '0%';

                            // Mostrar alerta de timeout
                            if (typeof Swal !== 'undefined') {
                                Swal.fire({
                                    title: "Tiempo de espera agotado",
                                    text: "La operación está tomando más tiempo de lo esperado. Por favor, intente nuevamente.",
                                    icon: "warning",
                                    confirmButtonText: "Entendido",
                                    confirmButtonColor: "#3D6FAD"
                                });
                            }
                        }
                    }, 10000);

                    // Actualizar localStorage después de limpiar
                    if (recuerdameSwitch.checked && correoInput.value) {
                        localStorage.setItem(storageKey, correoInput.value);
                    } else if (!recuerdameSwitch.checked) {
                        localStorage.removeItem(storageKey);
                    }
                });
            }

            // ⭐⭐ Cierre animado de mensajes (incluyendo timeout)
            const mensajeTimeout = document.getElementById("mensajeTimeout");
            const mensajeExito = document.getElementById("mensajeExito");
            const mensajeError = document.getElementById("mensajeError");
            const validationSummary = document.querySelector(".validation-summary-errors");

            // Mensaje de timeout (dura más tiempo)
            if (mensajeTimeout) {
                setTimeout(() => {
                    mensajeTimeout.classList.add("fade-out");
                    setTimeout(() => mensajeTimeout.remove(), 500);
                }, 8000); // 8 segundos para el mensaje de timeout
            }

            // Mensaje de éxito
            if (mensajeExito) {
                setTimeout(() => {
                    mensajeExito.classList.add("fade-out");
                    setTimeout(() => mensajeExito.remove(), 500);
                }, 5000);
            }

            // Mensaje de error
            if (mensajeError) {
                setTimeout(() => {
                    mensajeError.classList.add("fade-out");
                    setTimeout(() => mensajeError.remove(), 500);
                }, 5000);
            }

            // Validación de resumen de errores
            if (validationSummary) {
                setTimeout(() => {
                    validationSummary.classList.add("fade-out");
                    setTimeout(() => validationSummary.remove(), 500);
                }, 5000);
            }

            // Rehabilitar botón si la página se recarga
            window.addEventListener('beforeunload', function() {
                btnLogin.disabled = false;
                btnText.textContent = 'Iniciar sesión';
                enviandoFormulario = false;
                loginProgress.style.width = '0%';
            });

            // ⭐⭐ Limpiar mensaje de timeout al empezar a escribir
            if (mensajeTimeout) {
                const inputs = [correoInput, contraseñaInput];
                inputs.forEach(input => {
                    if (input) {
                        input.addEventListener('input', function() {
                            if (mensajeTimeout && !mensajeTimeout.classList.contains('fade-out')) {
                                mensajeTimeout.classList.add('fade-out');
                                setTimeout(() => {
                                    if (mensajeTimeout.parentNode) {
                                        mensajeTimeout.remove();
                                    }
                                }, 500);
                            }
                        });
                    }
                });
            }
        });
    </script>
</body>
</html>