@model OfiGest.Models.DivisionesModel
@{
    ViewData["Title"] = "Editar División";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .btn-azul {
        background-color: #3D6FAD;
        color: white;
        width: 100%;
        padding: 0.75rem;
        font-weight: bold;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

    .bootstrap-select .dropdown-toggle {
        border: 1px solid #ced4da;
        border-radius: .25rem;
        background: white;
    }

    .btn-azul:hover {
        background-color: #2f5c91;
        color: white;
    }

    .card-adjusted {
        height: 700px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        margin-top: 1rem;
        margin-bottom: 2rem;
        padding: 2rem;
    }

    textarea {
        resize: none;
        height: 300px;
    }
</style>
<form asp-action="Edit" method="post" autocomplete="off" id="editForm">
    <input type="hidden" asp-for="Id" />

    <div class="container-fluid d-flex flex-column compact-container">
        @Html.AntiForgeryToken()
        <h4 class="mt-3 mb-3">Editar División</h4>
        <div class="card shadow-sm border-0 p-6 card-adjusted">

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="Nombre" class="form-label">@Html.DisplayNameFor(m => m.Nombre)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <input asp-for="Nombre" class="form-control" placeholder="Departamento de Recursos Humanos" maxlength="100" />
                    <span asp-validation-for="Nombre" class="text-danger d-none"></span>
                </div>

                <div class="col-md-6 mb-3">
                    <label asp-for="Iniciales" class="form-label">@Html.DisplayNameFor(m => m.Iniciales)<small class="text-muted">(Puede editarse)</small></label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <input asp-for="Iniciales" class="form-control" id="codigoCorto" maxlength="20" placeholder="Se genera automáticamente" />
                    <span asp-validation-for="Iniciales" class="text-danger d-none"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="DepartamentoId" class="form-label">@Html.DisplayNameFor(m => m.DepartamentoId)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <select asp-for="DepartamentoId"
                            asp-items="ViewBag.Departamentos"
                            class="form-control selectpicker"
                            data-live-search="true"
                            data-size="5"
                            id="DepartamentoId">
                        <option value="">Seleccione un departamento</option>
                    </select>
                    <span asp-validation-for="DepartamentoId" class="text-danger d-none"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Descripcion" class="form-label">@Html.DisplayNameFor(m => m.Descripcion)<span class="text-muted">(Opcional)</span></label>
                    <textarea asp-for="Descripcion" maxlength="500" class="form-control" placeholder="Escribe una descripción si lo deseas..."></textarea>
                    <span asp-validation-for="Descripcion" class="text-danger d-none"></span>
                    <div id="contadorDescripcion" class="mt-2 text-muted text-end"></div>
                </div>
            </div>

            <div class="mt-auto">
                <button type="submit" class="btn btn-azul d-flex justify-content-center align-items-center gap-2 w-100">
                    ACTUALIZAR DIVISIÓN
                </button>
            </div>
        </div>
    </div>
</form>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">

    <script>
        $(document).ready(function () {
            $('form').attr('novalidate', 'novalidate');
            $('.selectpicker').selectpicker();

            const warningMessage = '@Html.Raw(TempData["Warning"]?.ToString())';
            const ValidacionMessage = '@Html.Raw(TempData["Validacion"]?.ToString())';

            if (warningMessage) {
                Swal.fire({
                    icon: "warning",
                    title: "¡Atención!",
                    text: warningMessage,
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
            } else if (ValidacionMessage) {
                Swal.fire({
                    icon: "error",
                    title: "¡Atención!",
                    text: ValidacionMessage,
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
            }

            const nombreInput = $('[name="Nombre"]');
            const inicialesInput = $('[name="Iniciales"]');
            const departamentoSelect = $('[name="DepartamentoId"]');
            const descripcionInput = $('[name="Descripcion"]');

            // Función para eliminar espacios extras
            function limpiarEspacios(texto) {
                return texto.replace(/\s+/g, ' ').trim(); // Reemplaza múltiples espacios por uno solo y elimina espacios al inicio/final
            }

            // Limpiar espacios en el input de Nombre
            nombreInput.on("input", function () {
                let valor = $(this).val();
                let valorLimpio = limpiarEspacios(valor);

                // Solo actualizar si hay cambios para evitar problemas con el cursor
                if (valor !== valorLimpio) {
                    $(this).val(valorLimpio);
                }

                // Generar iniciales automáticamente
                const palabras = valorLimpio.split(/\s+/);
                const generadas = palabras.map(p => p.charAt(0).toUpperCase()).join("");

                const manual = inicialesInput.val().trim().toUpperCase();
                const combinadas = manual.length > 0 && !manual.startsWith(generadas)
                    ? generadas + manual
                    : generadas;

                inicialesInput.val(combinadas);
            });

            // Limpiar espacios en el input de Iniciales
            inicialesInput.on("input", function () {
                let valor = $(this).val();
                // Para iniciales, eliminar todos los espacios
                let valorLimpio = valor.replace(/\s+/g, '').toUpperCase();

                if (valor !== valorLimpio) {
                    $(this).val(valorLimpio);
                }
            });

            // También limpiar espacios cuando el usuario pierde el foco (evento blur)
            nombreInput.on("blur", function () {
                $(this).val(limpiarEspacios($(this).val()));
            });

            inicialesInput.on("blur", function () {
                $(this).val($(this).val().replace(/\s+/g, '').toUpperCase());
            });

            // Limpiar espacios en el textarea de Descripción
            descripcionInput.on("input", function () {
                let valor = $(this).val();
                // Para descripción, solo limpiamos espacios extras pero mantenemos saltos de línea
                let valorLimpio = valor.replace(/[ ]+/g, ' '); // Solo espacios múltiples, no afecta saltos de línea

                if (valor !== valorLimpio) {
                    $(this).val(valorLimpio);
                }
            });

            descripcionInput.on("blur", function () {
                let valor = $(this).val();
                $(this).val(valor.replace(/[ ]+/g, ' ').trim());
            });

            if (descripcionInput.length) {
                const contador = $('#contadorDescripcion');
                const maxLength = 500;
                const umbral = 450;
                let alertaMostrada = false;

                descripcionInput.on("input", function () {
                    const actual = descripcionInput.val().length;
                    contador.text(`${actual}/${maxLength} caracteres`);
                    contador.removeClass("text-warning text-danger");

                    if (actual >= maxLength) {
                        contador.addClass("text-danger");
                        if (!alertaMostrada) {
                            Swal.fire({
                                title: "Límite alcanzado",
                                text: "Has llegado al máximo de 500 caracteres permitidos.",
                                icon: "warning",
                                confirmButtonText: "Entendido",
                                confirmButtonColor: "#3D6FAD"
                            });
                            alertaMostrada = true;
                        }
                    } else if (actual >= umbral) {
                        contador.addClass("text-warning");
                        alertaMostrada = false;
                    } else {
                        alertaMostrada = false;
                    }
                });

                const actual = descripcionInput.val().length;
                contador.text(`${actual}/${maxLength} caracteres`);
                if (actual >= maxLength) contador.addClass("text-danger");
                else if (actual >= umbral) contador.addClass("text-warning");
            }

            $('#editForm').on('submit', function (e) {
                e.preventDefault();

                // Limpiar espacios finales antes de enviar
                nombreInput.val(limpiarEspacios(nombreInput.val()));
                inicialesInput.val(inicialesInput.val().replace(/\s+/g, '').toUpperCase());
                descripcionInput.val(limpiarEspacios(descripcionInput.val()));

                const nombreActual = nombreInput.val();
                const inicialesActuales = inicialesInput.val();
                const departamentoIdActual = departamentoSelect.val();

                if (!nombreActual || !inicialesActuales || !departamentoIdActual) {
                    Swal.fire({
                        title: '<span>Campos requeridos (<span style="color:#dc3545">*</span>)</span>',
                        text: "Por favor complete todos los campos obligatorios.",
                        icon: "warning",
                        confirmButtonText: "Entendido",
                        confirmButtonColor: "#3D6FAD"
                    });
                    return false;
                }

                this.submit();
            });
        });
    </script>
}