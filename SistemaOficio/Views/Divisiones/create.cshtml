@model OfiGest.Models.DivisionesModel
@{
    ViewData["Title"] = "Crear Divisiones";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .btn-azul {
        background-color: #3D6FAD;
        color: white;
        width: 100%;
        padding: 0.75rem;
        font-weight: bold;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

        .btn-azul:hover {
            background-color: #2f5c91;
            color: white;
        }

    .bootstrap-select .dropdown-toggle {
        border: 1px solid #ced4da;
        border-radius: .25rem;
        background: white;
    }


    .bootstrap-select .dropdown-menu li.selected > a {
        background-color: #3D6FAD !important;
        color: white !important;
    }

    .card-adjusted {
        height: 700px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        margin-top: 1rem;
        margin-bottom: 2rem;
        padding: 2rem;
    }

    textarea {
        resize: none;
        height: 300px;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 0.5rem;
    }
</style>

<form asp-action="Create" method="post" autocomplete="off" id="createForm">
    <div class="container-fluid d-flex flex-column compact-container">
        @Html.AntiForgeryToken()
        <h4 class="mt-3 mb-3">Crear División</h4>
        <div class="card shadow-sm border-0 p-6 card-adjusted">

            <div class="row">
                <!-- Nombre -->
                <div class="col-md-6 mb-3">
                    <label asp-for="Nombre" class="form-label">@Html.DisplayNameFor(m => m.Nombre)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-diagram-3-fill"></i></span>
                        <input asp-for="Nombre" class="form-control" maxlength="100" placeholder="Ej: Supervisión Operativa" />
                    </div>
                    <span asp-validation-for="Nombre" class="text-danger d-none"></span>
                </div>

                <!-- Iniciales -->
                <div class="col-md-6 mb-3">
                    <label asp-for="Iniciales" class="form-label">
                        @Html.DisplayNameFor(m => m.Iniciales)
                        <small class="text-muted">(Puede editarse)</small>
                    </label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-code-slash"></i></span>
                        <input asp-for="Iniciales" class="form-control" id="codigoCorto" maxlength="20" placeholder="Ej: SO, se sugiere automáticamente" />
                    </div>
                    <span asp-validation-for="Iniciales" class="text-danger d-none"></span>
                </div>

                <!-- Departamento -->
                <div class="mb-3">
                    <label asp-for="DepartamentoId" class="form-label">@Html.DisplayNameFor(m => m.DepartamentoId)</label>
                    <span class="text-danger" title="Campo obligatorio">*</span>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-building"></i></span>
                        <select asp-for="DepartamentoId"
                                asp-items="ViewBag.Departamentos"
                                class="form-control selectpicker"
                                data-live-search="true"
                                data-size="5"
                                id="DepartamentoId">
                            <option value="">Seleccione el departamento al que pertenece</option>
                        </select>
                    </div>
                    <span asp-validation-for="DepartamentoId" class="text-danger d-none"></span>
                </div>

                <!-- Descripción -->
                <div class="mb-3">
                    <label asp-for="Descripcion" class="form-label">
                        @Html.DisplayNameFor(m => m.Descripcion)
                        <span class="text-muted">(Opcional)</span>
                    </label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-card-text"></i></span>
                        <textarea asp-for="Descripcion" maxlength="500" class="form-control" placeholder="Ej: División encargada de supervisar operaciones en campo..."></textarea>
                    </div>
                    <span asp-validation-for="Descripcion" class="text-danger d-none"></span>
                    <div id="contadorDescripcion" class="mt-2 text-muted text-end"></div>
                </div>
            </div>

            <!-- Botón de envío -->
            <div class="mt-auto">
                <button type="submit" class="btn btn-azul d-flex justify-content-center align-items-center gap-2 w-100">
                    CREAR DIVISIÓN
                </button>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/js/bootstrap-select.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">

    <script>
                $(document).ready(function () {
            $('form').attr('novalidate', 'novalidate');
            $('.selectpicker').selectpicker();

            const ValidacionMessage = '@Html.Raw(TempData["Validacion"]?.ToString())';

            if (ValidacionMessage) {
                Swal.fire({
                    icon: "error",
                    title: "¡Atención!",
                    text: ValidacionMessage,
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3D6FAD"
                });
            }

            const nombreInput = $('[name="Nombre"]');
            const inicialesInput = $('[name="Iniciales"]');
            const departamentoSelect = $('[name="DepartamentoId"]');
            const descripcionInput = $('[name="Descripcion"]');
            const contador = $('#contadorDescripcion');

            // Función para eliminar solo espacios al principio
            function limpiarEspaciosInicio(texto) {
                return texto.replace(/^\s+/, ''); // Solo elimina espacios al inicio
            }

            // Limpiar espacios al principio en el input de Nombre
            nombreInput.on("blur", function () {
                $(this).val(limpiarEspaciosInicio($(this).val()));
            });

            // Limpiar espacios al principio en el input de Iniciales
            inicialesInput.on("blur", function () {
                $(this).val(limpiarEspaciosInicio($(this).val()));
            });

            // Generar iniciales automáticamente (sin limpiar espacios internos)
            nombreInput.on("input", function () {
                let valor = $(this).val();

                // Generar iniciales automáticamente
                const palabras = valor.trim().split(/\s+/);
                const generadas = palabras.map(p => p.charAt(0).toUpperCase()).join("");

                const manual = inicialesInput.val().trim();
                const combinadas = manual.length > 0 && !manual.startsWith(generadas)
                    ? generadas + manual
                    : generadas;

                inicialesInput.val(combinadas);
            });

            // Convertir iniciales a mayúsculas
            inicialesInput.on("input", function () {
                let valor = $(this).val();
                $(this).val(valor.toUpperCase());
            });

            // Limpiar espacios al principio en el textarea de Descripción
            descripcionInput.on("blur", function () {
                $(this).val(limpiarEspaciosInicio($(this).val()));
            });

            // Contador de caracteres para descripción
            if (descripcionInput.length) {
                const maxLength = 500;
                const umbral = 450;
                let alertaMostrada = false;

                descripcionInput.on("input", function () {
                    const actual = descripcionInput.val().length;
                    contador.text(`${actual}/${maxLength} caracteres`);
                    contador.removeClass("text-warning text-danger");

                    if (actual >= maxLength) {
                        contador.addClass("text-danger");
                        if (!alertaMostrada) {
                            Swal.fire({
                                title: "Límite alcanzado",
                                text: "Has llegado al máximo de 500 caracteres permitidos.",
                                icon: "warning",
                                confirmButtonText: "Entendido",
                                confirmButtonColor: "#3D6FAD"
                            });
                            alertaMostrada = true;
                        }
                    } else if (actual >= umbral) {
                        contador.addClass("text-warning");
                        alertaMostrada = false;
                    } else {
                        alertaMostrada = false;
                    }
                });

                const actual = descripcionInput.val().length;
                contador.text(`${actual}/${maxLength} caracteres`);
                if (actual >= maxLength) contador.addClass("text-danger");
                else if (actual >= umbral) contador.addClass("text-warning");
            }

            // Validación institucional al enviar
            $('#createForm').on('submit', function (e) {
                e.preventDefault();

                // Limpiar espacios al principio antes de enviar
                nombreInput.val(limpiarEspaciosInicio(nombreInput.val()));
                inicialesInput.val(limpiarEspaciosInicio(inicialesInput.val()).toUpperCase());
                descripcionInput.val(limpiarEspaciosInicio(descripcionInput.val()));

                const nombreActual = nombreInput.val();
                const inicialesActuales = inicialesInput.val();
                const departamentoIdActual = departamentoSelect.val();

                if (!nombreActual || !inicialesActuales || !departamentoIdActual) {
                    Swal.fire({
                        title: '<span>Campos requeridos (<span style="color:#dc3545">*</span>)</span>',
                        text: "Por favor complete todos los campos obligatorios.",
                        icon: "warning",
                        confirmButtonText: "Entendido",
                        confirmButtonColor: "#3D6FAD"
                    });
                    return false;
                }

                this.submit();
            });
        });
    </script>
       
}